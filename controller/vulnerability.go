package controller

import (
	"fmt"
	"strings"
	"time"

	"github.com/e421083458/golang_common/lib"
	"github.com/gin-gonic/gin"
	"github.com/wh1t3zer/Hawkeye-Go/dao"
	"github.com/wh1t3zer/Hawkeye-Go/dto"
	"github.com/wh1t3zer/Hawkeye-Go/middleware"
	"github.com/wh1t3zer/Hawkeye-Go/utils"
)

// VulController ...
type VulController struct{}

// VulRegister ...
func VulRegister(router *gin.RouterGroup) {
	ctl := VulController{}
	router.GET("/list", ctl.VulList)
	router.GET("/plugin/list", ctl.PocPluginList)        // 插件列表
	router.GET("/plugin", ctl.PocPluginInfo)             // 插件详情
	router.PUT("/plugin/update", nil)                 // 插件修改
	router.POST("/plugin/add", ctl.PocPluginAdd)         // 插件新增
	router.DELETE("/plugin/delele", ctl.PocPluginDelete) // 插件删除
	router.GET("/trojan/list", nil)                   // 木马列表
}

// VulList godoc
// @Summary 漏洞列表
// @Description 漏洞列表
// @Tags 漏洞管理
// @ID /vul/list
// @Accept  json
// @Produce  json
// @Param info query string false "模糊查询"
// @Param limit query string true "每页条数"
// @Param page query string true "页码"
// @Success 200 {object} middleware.Response{data=dto.VulListOutput} "success"
// @Router /vul/list [get]
func (admin *VulController) VulList(c *gin.Context) {
	params := &dto.PublicListInput{}
	if err := params.GetValidParams(c); err != nil {
		middleware.ResponseError(c, 2001, err)
		return
	}
	vulinfo := &dao.VulInfo{}
	vularray, total, err := vulinfo.PageList(c, lib.GORMDefaultPool, params)
	if err != nil {
		middleware.ResponseError(c, 2002, err)
		return
	}
	// 查询对象

	outarray := []*dto.VulInfoOutput{}
	for _, vul := range vularray {
		assetObj := &dao.AssetInfo{ID: vul.AssetID}
		asset, _ := assetObj.Find(c, lib.GORMDefaultPool, assetObj)
		poctObj := &dao.PocPlugin{ID: vul.PluginID}
		poc, _ := poctObj.Find(c, lib.GORMDefaultPool, poctObj)
		portObj := &dao.PortInfo{ID: vul.PortID}
		port, _ := portObj.Find(c, lib.GORMDefaultPool, portObj)

		line := 1
		api := utils.NewConsulAPI(vul.PortID)
		addr, _, err := api.GetRealServer()
		if err != nil {
			line = 0
		}
		if strings.Contains(addr, asset.IP) {
			line = 2
		}
		outarray = append(outarray, &dto.VulInfoOutput{
			ID:              vul.ID,
			AssetID:         vul.AssetID,
			Asset:           fmt.Sprintf("%v:%v", asset.IP, port.Port),
			PortID:          vul.PortID,
			PluginID:        vul.PluginID,
			AppName:         poc.AppName,
			VulName:         poc.VulName,
			VulType:         poc.VulType,
			VerifyURL:       vul.VerifyURL,
			VerifyPayload:   vul.VerifyPayload,
			VerifyResult:    vul.VerifyResult,
			ExploitURL:      vul.ExploitURL,
			ExploitPayload:  vul.ExploitPayload,
			ExploitResult:   vul.ExploitResult,
			WebshellURL:     vul.WebshellURL,
			WebshellPayload: vul.WebshellPayload,
			WebshellResult:  vul.WebshellResult,
			TrojanURL:       vul.TrojanURL,
			TrojanPayload:   vul.TrojanPayload,
			TrojanResult:    vul.TrojanResult,
			CreatedAt:       vul.CreatedAt.Format("2006-01-02 15:04:05"),
			IsDelete:        vul.IsDelete,
			SpareLine:       int8(line),
		})
	}
	out := dto.VulListOutput{
		Total: total,
		List:  outarray,
	}
	middleware.ResponseSuccess(c, out)
	return
}

// PluginList godoc
// @Summary 插件列表
// @Description 插件列表
// @Tags 漏洞管理
// @ID /vul/plugin/list
// @Accept  json
// @Produce  json
// @Param info query string false "模糊查询"
// @Param limit query string true "每页条数"
// @Param page query string true "页码"
// @Success 200 {object} middleware.Response{data=dto.PocPluginListOutput} "success"
// @Router /vul/plugin/list [get]
func (admin *VulController) PocPluginList(c *gin.Context) {
	params := &dto.PublicListInput{}
	if err := params.GetValidParams(c); err != nil {
		middleware.ResponseError(c, 2001, err)
		return
	}

	info := &dao.PocPlugin{}
	list, total, err := info.AllRecord(c, lib.GORMDefaultPool)
	if err != nil {
		middleware.ResponseError(c, 2002, err)
		return
	}

	PluginList := []dto.PocPluginInfoOutput{}
	for _, plugin := range list {
		item := dto.PocPluginInfoOutput{
			ID: plugin.ID, VulID: plugin.VulID, VulName: plugin.VulName, VulType: plugin.VulType, VulDate: plugin.VulDate.Format("2006-01-02"),
			Version: plugin.Version, Author: plugin.Author, AppPowerLink: plugin.AppPowerLink, AppName: plugin.AppName, AppVersion: plugin.AppVersion,
			Desc: plugin.Desc, Cnnvd: plugin.Cnnvd, CveID: plugin.CveID, Rank: plugin.Rank, DefaultPorts: plugin.DefaultPorts,
			DefaultService: plugin.DefaultService, Content: plugin.Content, UpdatedAt: plugin.UpdatedAt.Format("2006-01-02 15:04:05"),
			CreatedAt: plugin.CreatedAt.Format("2006-01-02 15:04:05"), IsDelete: plugin.IsDelete,
		}
		PluginList = append(PluginList, item)
	}
	output := dto.PocPluginListOutput{
		List:  PluginList,
		Total: total,
	}
	middleware.ResponseSuccess(c, output)
	return
}

// PluginInfo godoc
// @Summary 插件详情
// @Description 插件详情
// @Tags 漏洞管理
// @ID /vul/plugin/info
// @Accept  json
// @Produce  json
// @Param id query string true "插件ID"
// @Success 200 {object} middleware.Response{data=dao.PocPlugin} "success"
// @Router /vul/plugin/info [get]
func (admin *VulController) PocPluginInfo(c *gin.Context) {
	params := &dto.PublicIDInput{}
	if err := params.GetValidParams(c); err != nil {
		middleware.ResponseError(c, 2001, err)
		return
	}
	search := &dao.PocPlugin{ID: params.ID}
	info, err := search.Find(c, lib.GORMDefaultPool, search)
	if err != nil {
		middleware.ResponseError(c, 2002, err)
		return
	}
	middleware.ResponseSuccess(c, info)
	return
}

// PluginDelete godoc
// @Summary 插件删除
// @Description 插件删除
// @Tags 漏洞管理
// @ID /vul/plugin/delete
// @Accept  json
// @Produce  json
// @Param id query string true "插件ID"
// @Success 200 {object} middleware.Response{data=string} "success"
// @Router /vul/plugin/delete [delete]
func (admin *VulController) PocPluginDelete(c *gin.Context) {
	params := &dto.PublicIDInput{}
	if err := params.GetValidParams(c); err != nil {
		middleware.ResponseError(c, 2001, err)
		return
	}
	search := &dao.PocPlugin{ID: params.ID}
	info, err := search.Find(c, lib.GORMDefaultPool, search)
	if err != nil {
		middleware.ResponseError(c, 2002, err)
		return
	}
	if err := info.Delete(c, lib.GORMDefaultPool); err != nil {
		middleware.ResponseError(c, 2003, err)
		return
	}
	middleware.ResponseSuccess(c, "delete success")
	return
}

// PluginAdd godoc
// @Summary 插件添加
// @Description 插件添加
// @Tags 漏洞管理
// @ID /vul/plugin/add
// @Accept  json
// @Produce  json
// @Param body body dto.PocPluginAddInput true "body"
// @Success 200 {object} middleware.Response{data=string} "success"
// @Router /vul/plugin/add [post]
func (admin *VulController) PocPluginAdd(c *gin.Context) {
	params := &dto.PocPluginAddInput{}
	if err := params.GetValidParams(c); err != nil {
		middleware.ResponseError(c, 2001, err)
		return
	}
	// 加载时区
	loc, err := time.LoadLocation("Asia/Shanghai")
	if err != nil {
		middleware.ResponseError(c, 2002, err)
		return
	}
	// 按照指定时区和指定格式解析字符串时间
	vuldate, err := time.ParseInLocation("2006/01/02 15:04:05", fmt.Sprintf("%s 00:00:00", strings.TrimSpace(params.VulDate)), loc)
	if err != nil {
		middleware.ResponseError(c, 2003, err)
		return
	}
	info := &dao.PocPlugin{
		VulID:          params.VulID,
		VulName:        params.VulName,
		VulType:        params.VulType,
		VulDate:        vuldate,
		Version:        params.Version,
		Author:         params.Author,
		AppPowerLink:   params.AppPowerLink,
		AppName:        params.AppName,
		AppVersion:     params.AppVersion,
		Desc:           params.Desc,
		Cnnvd:          params.Cnnvd,
		CveID:          params.CveID,
		Rank:           params.Rank,
		DefaultPorts:   params.DefaultPorts,
		DefaultService: params.DefaultService,
		Content:        params.Content,
	}
	if err := info.Save(c, lib.GORMDefaultPool); err != nil {
		middleware.ResponseError(c, 2005, err)
		return
	}
	middleware.ResponseSuccess(c, "success")
	return
}
