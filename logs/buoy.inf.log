[INFO][2021-02-06T16:04:05.395][log.go:58] _com_request_in||method=GET||args=map[]||traceid=ac1f32f9601e4d75af3224fc8c52b4b0||cspanid=||spanid=cc017f8c4bc0e3f2||uri=/trap/plugin/list?limit=10&page=1||body=||from=172.31.50.45
[INFO][2021-02-06T16:04:05.395][log.go:58] _com_mysql_success||level=sql||current_time=2021-02-06 16:04:05||proc_time=0.004353s||sql=SELECT * FROM `trap_plugin`   ORDER BY id asc LIMIT 10 OFFSET 0||cspanid=||source=/root/go/src/github.com/wh1t3zer/Hawkeye-Go/dao/trap_plugin.go:67||affected_row=10||traceid=ac1f32f9601e4d75af3224fc8c52b4b0||spanid=cc017f8c4bc0e3f2
[INFO][2021-02-06T16:04:05.395][log.go:58] _com_mysql_success||level=sql||sql=SELECT count(*) FROM `trap_plugin`  ||affected_row=0||traceid=ac1f32f9601e4d75af3224fc8c52b4b0||cspanid=||source=/root/go/src/github.com/wh1t3zer/Hawkeye-Go/dao/trap_plugin.go:71||current_time=2021-02-06 16:04:05||proc_time=0.000735s||spanid=cc017f8c4bc0e3f2
[INFO][2021-02-06T16:04:05.395][log.go:58] _com_request_out||args=map[]||traceid=ac1f32f9601e4d75af3224fc8c52b4b0||cspanid=||uri=/trap/plugin/list?limit=10&page=1||method=GET||from=172.31.50.45||response={\"errno\":0,\"errmsg\":\"\",\"data\":{\"total\":13,\"list\":[{\"id\":1,\"trap_id\":\"0001\",\"name\":\"whoisscanme TCP 蜜罐服务\",\"author\":\"jstang\",\"protocol\":\"TCP\",\"app_name\":\"TCP App\",\"honeypot\":\"whoisscanme\",\"desc\":\"whoisscanme TCP 蜜罐服务, 通过TCP使用空数据请求任意端口得到特征值: whoisscanme:https://github.com/bg6cq/whoisscanme\",\"content\":\"import socket\\nfrom pocsuite3.api import Output, POCBase, register_poc\\n\\n\\nclass WhoisScanMe(POCBase):\\n    vulID = '0001'\\n    author = ['jstang']\\n    name = 'whoisscanme TCP 蜜罐服务'\\n    project = 'whoisscanme'\\n    appName = 'TCP App'\\n    appVersion = 'None'\\n    desc = \\\"whoisscanme TCP 蜜罐服务, 通过TCP使用空数据请求任意端口得到特征值: whoisscanme:https://github.com/bg6cq/whoisscanme\\\"\\n\\n    def _attack(self):\\n        print(\\\"\\u003e\\u003e\\u003e\\u003eexecute _attack\\\")\\n        return self._verify()\\n\\n    def _verify(self):\\n        try:\\n            attr = self.target.split(':')\\n            # 1.创建套接字\\n            s = socket.socket()\\n            # 2.连接\\n            s.connect((attr[0], int(attr[1])))\\n            # 3.请求\\n            s.send(b'')  # TCP是面向字节流的协议,在进行TCP通信时都需要转成字节流才可以使用TCP协议进行传输。\\n            msg = s.recv(1024)\\n            print('From server: %!s(MISSING)' %!m(MISSING)sg)\\n            if 'whoisscanme' in str(msg):\\n                return self.parse_output({'verify': str(msg)})\\n        except Exception as e:\\n            print(e)\\n\\n        return self.parse_output({})\\n\\n    def parse_output(self, result):\\n        output = Output(self)\\n        if result:\\n            output.success(result)\\n        else:\\n            output.fail('The target looks safe!')\\n        return output\\n\\n\\nregister_poc(WhoisScanMe)\\n\",\"create_at\":\"1971-01-01 00:00:00\",\"update_at\":\"2021-02-03 11:01:41\",\"is_delete\":0},{\"id\":2,\"trap_id\":\"0002\",\"name\":\"Cowrie Telnet 蜜罐服务\",\"author\":\"jstang\",\"protocol\":\"TCP\",\"app_name\":\"Telnet\",\"honeypot\":\"Cowrie\",\"desc\":\"Cowrie Telnet 蜜罐服务, 通过TCP使用空数据请求23/2323端口得到特征值: \\\\\\\\xff\\\\\\\\xfd\\\\\\\\x1flogin:\",\"content\":\"# Dionaea 的Memcached协议举例，在实现Memcached协议时Dionaea在一些参数如：version、libevent和rusage_user等都是固定的。\\n# 仅需IP和端口\\nimport socket\\nfrom pocsuite3.api import Output, POCBase, register_poc\\n\\n\\nclass Cowrie(POCBase):\\n    vulID = '0002'\\n    author = ['jstang']\\n    name = \\\"Cowrie Telnet 蜜罐服务\\\"\\n    project = 'Cowrie'\\n    appName = 'Telnet'\\n    appVersion = 'None'\\n    desc = \\\"Cowrie Telnet 蜜罐服务, 通过TCP使用空数据请求23/2323端口得到特征值: \\\\\\\\xff\\\\\\\\xfd\\\\\\\\x1flogin:\\\"\\n\\n    def _attack(self):\\n        return self._verify()\\n\\n    def _verify(self):\\n        try:\\n            attr = self.target.split(':')\\n            # 0.必须是23/2323端口\\n            if attr[1] != str(23) and attr[1] != str(2323):\\n                return self.parse_output({})\\n\\n            # 1.创建套接字\\n            s = socket.socket()\\n            # 2.连接\\n            s.connect((attr[0], int(attr[1])))\\n            # 3.校验特征\\n            msg = s.recv(1024)\\n            print('From server: %!s(MISSING)' %!m(MISSING)sg)\\n            if '\\\\\\\\xff\\\\\\\\xfd\\\\\\\\x1flogin:' in str(msg):\\n                return self.parse_output({'verify': str(msg)})\\n        except Exception as e:\\n            print(e)\\n\\n        return self.parse_output({})\\n\\n    def parse_output(self, result):\\n        output = Output(self)\\n        if result:\\n            output.success(result)\\n        else:\\n            output.fail('The target looks safe!')\\n        return output\\n\\n\\nregister_poc(Cowrie)\\n\",\"create_at\":\"2021-02-01 11:49:27\",\"update_at\":\"2021-02-03 11:01:36\",\"is_delete\":0},{\"id\":3,\"trap_id\":\"0003\",\"name\":\"Amun IMAP 蜜罐服务\",\"author\":\"jstang\",\"protocol\":\"IMAP\",\"app_name\":\"IMAP\",\"honeypot\":\"Amun\",\"desc\":\"Amun IMAP 蜜罐服务, 通过imap协议使用数据(\\\\\\\\r\\\\\\\\n\\\\\\\\r\\\\\\\\n)请求143端口得到特征值: a001 OK LOGIN completed\",\"content\":\"# Dionaea 的Memcached协议举例，在实现Memcached协议时Dionaea在一些参数如：version、libevent和rusage_user等都是固定的。\\n# 仅需IP和端口\\nimport socket\\nfrom pocsuite3.api import Output, POCBase, register_poc\\n\\n\\nclass Amun(POCBase):\\n    vulID = '0003'\\n    author = ['jstang']\\n    name = \\\"Amun IMAP 蜜罐服务\\\"\\n    project = 'Amun'\\n    appName = 'IMAP'\\n    appVersion = 'None'\\n    desc = \\\"Amun IMAP 蜜罐服务, 通过imap协议使用数据(\\\\\\\\r\\\\\\\\n\\\\\\\\r\\\\\\\\n)请求143端口得到特征值: a001 OK LOGIN completed\\\"\\n\\n    def _attack(self):\\n        return self._verify()\\n\\n    def _verify(self):\\n        try:\\n            attr = self.target.split(':')\\n            if attr[1] != str(143):\\n                return self.parse_output({})\\n            # 1.创建套接字\\n            s = socket.socket()\\n            # 2.连接\\n            s.connect((attr[0], int(attr[1])))\\n            # 3.请求\\n            s.send(b'\\\\r\\\\n\\\\r\\\\n')  # TCP是面向字节流的协议,在进行TCP通信时都需要转成字节流才可以使用TCP协议进行传输。\\n            msg = s.recv(1024)\\n            print('From server: %!s(MISSING)' %!m(MISSING)sg)\\n            if 'a001' in str(msg) and 'OK' in str(msg) and 'LOGIN' in str(msg) and 'completed' in str(msg):\\n                return self.parse_output({'verify': str(msg)})\\n        except Exception as e:\\n            print(e)\\n\\n        return self.parse_output({})\\n\\n    def parse_output(self, result):\\n        output = Output(self)\\n        if result:\\n            output.success(result)\\n        else:\\n            output.fail('The target looks safe!')\\n        return output\\n\\n\\nregister_poc(Amun)\\n\",\"create_at\":\"2021-02-01 11:52:58\",\"update_at\":\"2021-02-03 11:01:30\",\"is_delete\":0},{\"id\":4,\"trap_id\":\"0004\",\"name\":\"Dionaea FTP 蜜罐服务\",\"author\":\"jstang\",\"protocol\":\"FTP\",\"app_name\":\"FTP\",\"honeypot\":\"Dionaea\",\"desc\":\"Dionaea FTP 蜜罐服务, 通过FTP协议使用空数据请求21端口得到特征值: 220 Welcome to the ftp service \\\\r\\\\n\",\"content\":\"import socket\\nfrom pocsuite3.api import Output, POCBase, register_poc\\n\\n\\nclass DionaeaFtp(POCBase):\\n    vulID = '0004'\\n    author = ['jstang']\\n    name = 'Dionaea FTP 蜜罐服务'\\n    project = 'Dionaea'\\n    appName = 'FTP'\\n    appVersion = 'None'\\n    desc = \\\"Dionaea FTP 蜜罐服务, 通过FTP协议使用空数据请求21端口得到特征值: 220 Welcome to the ftp service \\\\r\\\\n\\\"\\n\\n    def _attack(self):\\n        return self._verify()\\n\\n    def _verify(self):\\n        try:\\n            attr = self.target.split(':')\\n            if attr[1] != '21':\\n                return self.parse_output({})\\n            # 1.创建套接字\\n            s = socket.socket()\\n            # 2.连接\\n            s.connect((attr[0], int(attr[1])))\\n            # 3.请求\\n            s.send(b'\\\\\\\\r\\\\\\\\n\\\\\\\\r\\\\\\\\n')  # TCP是面向字节流的协议,在进行TCP通信时都需要转成字节流才可以使用TCP协议进行传输。\\n            msg = s.recv(1024)\\n            print('From server: %!s(MISSING)' %!m(MISSING)sg)\\n            if '220 Welcome to the ftp service' in str(msg):\\n                return self.parse_output({'verify': str(msg)})\\n        except Exception as e:\\n            print(e)\\n\\n        return self.parse_output({})\\n\\n    def parse_output(self, result):\\n        output = Output(self)\\n        if result:\\n            output.success(result)\\n        else:\\n            output.fail('The target looks safe!')\\n        return output\\n\\n\\nregister_poc(DionaeaFtp)\\n\",\"create_at\":\"2021-02-01 11:54:03\",\"update_at\":\"2021-02-03 11:01:24\",\"is_delete\":0},{\"id\":5,\"trap_id\":\"0005\",\"name\":\"Dionaea MSSQL 蜜罐服务\",\"author\":\"jstang\",\"protocol\":\"TCP\",\"app_name\":\"MSSQL\",\"honeypot\":\"Dionaea\",\"desc\":\"Dionaea MSSQL 蜜罐服务, 通过MSSQL协议使用空数据请求1443端口得到特征值: \\\\x04\\\\x01\\\\x00\\\\x2b\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x1a\\\\x00\\\\x06\\\\x01\\\\x00\\\\x20\\\\x00\\\\x01\\\\x02\\\\x00\\\\x21\\\\x00\\\\x01\\\\x03\\\\x00\\\\x22\\\\x00\\\\x00\\\\x04\\\\x00\\\\x22\\\\x00\\\\x01\\\\xff\\\\x08\\\\x00\\\\x02\\\\x10\\\\x00\\\\x00\\\\x02\\\\x00\\\\x00\",\"content\":\"import socket\\nfrom pocsuite3.api import Output, POCBase, register_poc\\n\\n\\nclass DionaeaMssql(POCBase):\\n    vulID = '0005'\\n    author = ['jstang']\\n    name = 'Dionaea MSSQL 蜜罐服务'\\n    project = 'Dionaea'\\n    appName = 'MSSQL'\\n    appVersion = 'None'\\n    desc = r\\\"Dionaea MSSQL 蜜罐服务, 通过MSSQL协议使用空数据请求1443端口得到特征值: \\\\x04\\\\x01\\\\x00\\\\x2b\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x1a\\\\x00\\\\x06\\\\x01\\\\x00\\\\x20\\\\x00\\\\x01\\\\x02\\\\x00\\\\x21\\\\x00\\\\x01\\\\x03\\\\x00\\\\x22\\\\x00\\\\x00\\\\x04\\\\x00\\\\x22\\\\x00\\\\x01\\\\xff\\\\x08\\\\x00\\\\x02\\\\x10\\\\x00\\\\x00\\\\x02\\\\x00\\\\x00\\\"\\n\\n    def _attack(self):\\n        return self._verify()\\n\\n    def _verify(self):\\n        try:\\n            attr = self.target.split(':')\\n            if attr[1] != '1443':\\n                return self.parse_output({})\\n            # 1.创建套接字\\n            s = socket.socket()\\n            # 2.连接\\n            s.connect((attr[0], int(attr[1])))\\n            # 3.请求\\n            s.send(b'\\\\\\\\r\\\\\\\\n\\\\\\\\r\\\\\\\\n')\\n            msg = s.recv(1024)\\n            print('From server: %!s(MISSING)' %!m(MISSING)sg)\\n            if r'\\\\x04\\\\x01\\\\x00\\\\x2b\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x1a\\\\x00\\\\x06\\\\x01\\\\x00\\\\x20\\\\x00\\\\x01\\\\x02\\\\x00\\\\x21\\\\x00\\\\x01\\\\x03\\\\x00\\\\x22\\\\x00\\\\x00\\\\x04\\\\x00\\\\x22\\\\x00\\\\x01\\\\xff\\\\x08\\\\x00\\\\x02\\\\x10\\\\x00\\\\x00\\\\x02\\\\x00\\\\x00' in self.bytesToHexString(msg):\\n                return self.parse_output({'verify': self.bytesToHexString(msg)})\\n        except Exception as e:\\n            print(e)\\n\\n        return self.parse_output({})\\n\\n    def bytesToHexString(self, bs: bytes):\\n        # hex_str = ''\\n        # for item in bs:\\n        #     hex_str += str(hex(item))[2:].zfill(2).upper() + \\\" \\\"\\n        # return hex_str\\n        return ''.join(['\\\\\\\\x%!x(MISSING)' %!b(MISSING) for b in bs])\\n\\n    def parse_output(self, result):\\n        output = Output(self)\\n        if result:\\n            output.success(result)\\n        else:\\n            output.fail('The target looks safe!')\\n        return output\\n\\n\\nregister_poc(DionaeaMssql)\\n\",\"create_at\":\"2021-02-01 11:55:07\",\"update_at\":\"2021-02-03 11:01:19\",\"is_delete\":0},{\"id\":6,\"trap_id\":\"0006\",\"name\":\"Kojoney SSH 蜜罐服务\",\"author\":\"jstang\",\"protocol\":\"SSH\",\"app_name\":\"SSH\",\"honeypot\":\"Kojoney\",\"desc\":\"Kojoney SSH 蜜罐服务, 通过imap协议使用空数据请求22/2222端口得到特征值: SSH-2.0-Twisted\\\\\\\\r\\\\\\\\n\",\"content\":\"import socket\\nfrom pocsuite3.api import Output, POCBase, register_poc\\n\\n\\nclass KojoneySSH(POCBase):\\n    vulID = '0006'\\n    author = ['jstang']\\n    name = 'Kojoney SSH 蜜罐服务'\\n    project = 'Kojoney'\\n    appName = 'SSH'\\n    appVersion = 'None'\\n    desc = \\\"Kojoney SSH 蜜罐服务, 通过imap协议使用空数据请求22/2222端口得到特征值: SSH-2.0-Twisted\\\\\\\\r\\\\\\\\n\\\"\\n\\n    def _attack(self):\\n        return self._verify()\\n\\n    def _verify(self):\\n        try:\\n            attr = self.target.split(':')\\n            if attr[1] != '22' and attr[1] != '2222':\\n                return self.parse_output({})\\n            # 1.创建套接字\\n            s = socket.socket()\\n            # 2.连接\\n            s.connect((attr[0], int(attr[1])))\\n            msg = s.recv(1024)\\n            print('From server: %!s(MISSING)' %!m(MISSING)sg)\\n            if 'SSH-2.0-Twisted' in str(msg):\\n                return self.parse_output({'verify': str(msg)})\\n        except Exception as e:\\n            print(e)\\n\\n        return self.parse_output({})\\n\\n    def parse_output(self, result):\\n        output = Output(self)\\n        if result:\\n            output.success(result)\\n        else:\\n            output.fail('The target looks safe!')\\n        return output\\n\\n\\nregister_poc(KojoneySSH)\\n\",\"create_at\":\"2021-02-01 11:55:51\",\"update_at\":\"2021-02-03 11:01:13\",\"is_delete\":0},{\"id\":7,\"trap_id\":\"0007\",\"name\":\"Nepenthes FTP 蜜罐服务\",\"author\":\"jstang\",\"protocol\":\"FTP\",\"app_name\":\"FTP\",\"honeypot\":\"Nepenthes\",\"desc\":\"Nepenthes FTP 蜜罐服务, 通过FTP协议使用空数据请求21端口得到特征值: ---freeFTPd 1.0---warFTPd 1.65---\\\\r\\\\n\",\"content\":\"import socket\\nfrom pocsuite3.api import Output, POCBase, register_poc\\n\\n\\nclass NepenthesFTP(POCBase):\\n    vulID = '0007'\\n    author = ['jstang']\\n    name = 'Nepenthes FTP 蜜罐服务'\\n    project = 'Nepenthes'\\n    appName = 'FTP'\\n    appVersion = 'None'\\n    desc = \\\"Nepenthes FTP 蜜罐服务, 通过FTP协议使用空数据请求21端口得到特征值: ---freeFTPd 1.0---warFTPd 1.65---\\\\r\\\\n\\\"\\n\\n    def _attack(self):\\n        return self._verify()\\n\\n    def _verify(self):\\n        try:\\n            attr = self.target.split(':')\\n            if attr[1] != '21':\\n                return self.parse_output({})\\n            # 1.创建套接字\\n            s = socket.socket()\\n            # 2.连接\\n            s.connect((attr[0], int(attr[1])))\\n            msg = s.recv(1024)\\n            print('From server: %!s(MISSING)' %!m(MISSING)sg)\\n            if '---freeFTPd 1.0---warFTPd 1.65---' in str(msg):\\n                return self.parse_output({'verify': str(msg)})\\n        except Exception as e:\\n            print(e)\\n\\n        return self.parse_output({})\\n\\n    def parse_output(self, result):\\n        output = Output(self)\\n        if result:\\n            output.success(result)\\n        else:\\n            output.fail('The target looks safe!')\\n        return output\\n\\n\\nregister_poc(NepenthesFTP)\\n\",\"create_at\":\"2021-02-01 11:56:41\",\"update_at\":\"2021-02-03 11:01:08\",\"is_delete\":0},{\"id\":8,\"trap_id\":\"0008\",\"name\":\"Nepenthes NETBIOS 蜜罐服务\",\"author\":\"jstang\",\"protocol\":\"TCP\",\"app_name\":\"NETBIOS\",\"honeypot\":\"Nepenthes\",\"desc\":\"Nepenthes NETBIOS 蜜罐服务, 通过NETBIOS协议使用空数据请求2103端口得到特征值: \\\\x82\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\",\"content\":\"import socket\\nfrom pocsuite3.api import Output, POCBase, register_poc\\n\\n\\nclass NepenthesNetbios(POCBase):\\n    vulID = '0008'\\n    author = ['jstang']\\n    name = 'Nepenthes NETBIOS 蜜罐服务'\\n    project = 'Nepenthes'\\n    appName = 'NETBIOS'\\n    appVersion = 'None'\\n    desc = \\\"Nepenthes NETBIOS 蜜罐服务, 通过NETBIOS协议使用空数据请求2103端口得到特征值: \\\\x82\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\"\\n\\n    def _attack(self):\\n        return self._verify()\\n\\n    def _verify(self):\\n        try:\\n            attr = self.target.split(':')\\n            if attr[1] != '2103':\\n                return self.parse_output({})\\n            # 1.创建套接字\\n            s = socket.socket()\\n            # 2.连接\\n            s.connect((attr[0], int(attr[1])))\\n            msg = s.recv(1024)\\n            print('From server: %!s(MISSING)' %!m(MISSING)sg)\\n            if r'\\\\x82\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00' in self.bytesToHexString(msg):\\n                return self.parse_output({'verify': self.bytesToHexString(msg)})\\n        except Exception as e:\\n            print(e)\\n\\n        return self.parse_output({})\\n\\n    def bytesToHexString(self, bs: bytes):\\n        # hex_str = ''\\n        # for item in bs:\\n        #     hex_str += str(hex(item))[2:].zfill(2).upper() + \\\" \\\"\\n        # return hex_str\\n        return ''.join(['\\\\\\\\x%!x(MISSING)' %!b(MISSING) for b in bs])\\n\\n    def parse_output(self, result):\\n        output = Output(self)\\n        if result:\\n            output.success(result)\\n        else:\\n            output.fail('The target looks safe!')\\n        return output\\n\\n\\nregister_poc(NepenthesNetbios)\\n\",\"create_at\":\"2021-02-01 11:57:49\",\"update_at\":\"2021-02-03 11:01:02\",\"is_delete\":0},{\"id\":9,\"trap_id\":\"0009\",\"name\":\"Conpot S7 蜜罐服务\",\"author\":\"jstang\",\"protocol\":\"TCP\",\"app_name\":\"S7\",\"honeypot\":\"Conpot\",\"desc\":\"Conpot S7 蜜罐服务, 通过S7协议使用空数据请求102端口得到特征值: Serial number of module: 88111222\",\"content\":\"import socket\\nfrom pocsuite3.api import Output, POCBase, register_poc\\n\\n\\nclass S7Conpot(POCBase):\\n    vulID = '0009'\\n    author = ['jstang']\\n    name = 'Conpot S7 蜜罐服务'\\n    project = 'Conpot'\\n    appName = 'S7'\\n    appVersion = 'None'\\n    desc = \\\"Conpot S7 蜜罐服务, 通过S7协议使用空数据请求102端口得到特征值: Serial number of module: 88111222\\\"\\n\\n    def _attack(self):\\n        return self._verify()\\n\\n    def _verify(self):\\n        try:\\n            attr = self.target.split(':')\\n            if attr[1] != '102':\\n                return self.parse_output({})\\n            # 1.创建套接字\\n            s = socket.socket()\\n            # 2.连接\\n            s.connect((attr[0], int(attr[1])))\\n            msg = s.recv(1024)\\n            print('From server: %!s(MISSING)' %!m(MISSING)sg)\\n            if 'Serial number of module:8811122' in str(msg):\\n                return self.parse_output({'verify': str(msg)})\\n        except Exception as e:\\n            print(e)\\n\\n        return self.parse_output({})\\n\\n    def parse_output(self, result):\\n        output = Output(self)\\n        if result:\\n            output.success(result)\\n        else:\\n            output.fail('The target looks safe!')\\n        return output\\n\\n\\nregister_poc(S7Conpot)\\n\",\"create_at\":\"2021-02-01 11:59:24\",\"update_at\":\"2021-02-03 11:00:57\",\"is_delete\":0},{\"id\":10,\"trap_id\":\"0010\",\"name\":\"Conpot Modbus 蜜罐服务\",\"author\":\"jstang\",\"protocol\":\"TCP\",\"app_name\":\"Modbus\",\"honeypot\":\"Conpot \",\"desc\":\"Conpot Modbus 蜜罐服务, 通过Modbus协议使用空数据请求502端口得到特征值: Device Identification: Siemems SIMATIC S7-200\",\"content\":\"import socket\\nfrom pocsuite3.api import Output, POCBase, register_poc\\n\\n\\nclass ConpotModbus(POCBase):\\n    vulID = '0010'\\n    author = ['jstang']\\n    name = 'Conpot Modbus 蜜罐服务'\\n    project = 'Conpot'\\n    appName = 'Modbus'\\n    appVersion = 'None'\\n    desc = \\\"Conpot Modbus 蜜罐服务, 通过Modbus协议使用空数据请求502端口得到特征值: Device Identification: Siemems SIMATIC S7-200\\\"\\n\\n    def _attack(self):\\n        return self._verify()\\n\\n    def _verify(self):\\n        try:\\n            attr = self.target.split(':')\\n            if attr[1] != '502':\\n                return self.parse_output({})\\n            # 1.创建套接字\\n            s = socket.socket()\\n            # 2.连接\\n            s.connect((attr[0], int(attr[1])))\\n            msg = s.recv(1024)\\n            print('From server: %!s(MISSING)' %!m(MISSING)sg)\\n            if 'Device Identification: Siemems SIMATIC S7-200' in str(msg):\\n                return self.parse_output({'verify': str(msg)})\\n        except Exception as e:\\n            print(e)\\n\\n        return self.parse_output({})\\n\\n    def parse_output(self, result):\\n        output = Output(self)\\n        if result:\\n            output.success(result)\\n        else:\\n            output.fail('The target looks safe!')\\n        return output\\n\\n\\nregister_poc(ConpotModbus)\\n\",\"create_at\":\"2021-02-01 11:59:51\",\"update_at\":\"2021-02-03 11:00:52\",\"is_delete\":0}]},\"trace_id\":\"ac1f32f9601e4d75af3224fc8c52b4b0\",\"stack\":null}||proc_time=0.007875304||spanid=cc017f8c4bc0e3f2
[INFO][2021-02-06T16:09:18.797][log.go:58] _com_request_in||cspanid=||args=map[]||from=172.31.50.45||traceid=ac1f32f9601e4eae93db24fc171bccb0||spanid=cc017c577edc3b85||uri=/trap/plugin/list?page_no=1&page_size=20&info=||method=GET||body=
[INFO][2021-02-06T16:09:18.797][log.go:58] _com_request_out||uri=/trap/plugin/list?page_no=1&page_size=20&info=||from=172.31.50.45||spanid=cc017c577edc3b85||traceid=ac1f32f9601e4eae93db24fc171bccb0||cspanid=||method=GET||args=map[]||response={\"errno\":2001,\"errmsg\":\"页数为必填字段,每页条数为必填字段\",\"data\":\"\",\"trace_id\":\"ac1f32f9601e4eae93db24fc171bccb0\",\"stack\":\"github.com/wh1t3zer/Hawkeye-Go/utils.DefaultGetValidParams\\n\\t/root/go/src/github.com/wh1t3zer/Hawkeye-Go/utils/parmas.go:34\\ngithub.com/wh1t3zer/Hawkeye-Go/dto.(*PublicListInput).GetValidParams\\n\\t/root/go/src/github.com/wh1t3zer/Hawkeye-Go/dto/public.go:27\\ngithub.com/wh1t3zer/Hawkeye-Go/controller.(*TrapController).PluginList\\n\\t/root/go/src/github.com/wh1t3zer/Hawkeye-Go/controller/trap.go:39\\ngithub.com/gin-gonic/gin.(*Context).Next\\n\\t/root/go/pkg/mod/github.com/gin-gonic/gin@v1.6.3/context.go:161\\ngithub.com/wh1t3zer/Hawkeye-Go/middleware.TranslationMiddleware.func1\\n\\t/root/go/src/github.com/wh1t3zer/Hawkeye-Go/middleware/translation.go:153\\ngithub.com/gin-gonic/gin.(*Context).Next\\n\\t/root/go/pkg/mod/github.com/gin-gonic/gin@v1.6.3/context.go:161\\ngithub.com/wh1t3zer/Hawkeye-Go/middleware.SessionAuthMiddleware.func1\\n\\t/root/go/src/github.com/wh1t3zer/Hawkeye-Go/middleware/session_auth.go:20\\ngithub.com/gin-gonic/gin.(*Context).Next\\n\\t/root/go/pkg/mod/github.com/gin-gonic/gin@v1.6.3/context.go:161\\ngithub.com/wh1t3zer/Hawkeye-Go/middleware.RequestLog.func1\\n\\t/root/go/src/github.com/wh1t3zer/Hawkeye-Go/middleware/request_log.go:61\\ngithub.com/gin-gonic/gin.(*Context).Next\\n\\t/root/go/pkg/mod/github.com/gin-gonic/gin@v1.6.3/context.go:161\\ngithub.com/wh1t3zer/Hawkeye-Go/middleware.RecoveryMiddleware.func1\\n\\t/root/go/src/github.com/wh1t3zer/Hawkeye-Go/middleware/recovery.go:32\\ngithub.com/gin-gonic/gin.(*Context).Next\\n\\t/root/go/pkg/mod/github.com/gin-gonic/gin@v1.6.3/context.go:161\\ngithub.com/gin-gonic/contrib/sessions.Sessions.func1\\n\\t/root/go/pkg/mod/github.com/gin-gonic/contrib@v0.0.0-20201101042839-6a891bf89f19/sessions/sessions.go:65\\ngithub.com/gin-gonic/gin.(*Context).Next\\n\\t/root/go/pkg/mod/github.com/gin-gonic/gin@v1.6.3/context.go:161\\ngithub.com/gin-gonic/gin.RecoveryWithWriter.func1\\n\\t/root/go/pkg/mod/github.com/gin-gonic/gin@v1.6.3/recovery.go:83\\ngithub.com/gin-gonic/gin.(*Context).Next\\n\\t/root/go/pkg/mod/github.com/gin-gonic/gin@v1.6.3/context.go:161\\ngithub.com/gin-gonic/gin.LoggerWithConfig.func1\\n\\t/root/go/pkg/mod/github.com/gin-gonic/gin@v1.6.3/logger.go:241\\ngithub.com/gin-gonic/gin.(*Context).Next\\n\\t/root/go/pkg/mod/github.com/gin-gonic/gin@v1.6.3/context.go:161\\ngithub.com/gin-gonic/gin.(*Engine).handleHTTPRequest\\n\\t/root/go/pkg/mod/github.com/gin-gonic/gin@v1.6.3/gin.go:409\\ngithub.com/gin-gonic/gin.(*Engine).ServeHTTP\\n\\t/root/go/pkg/mod/github.com/gin-gonic/gin@v1.6.3/gin.go:367\\nnet/http.serverHandler.ServeHTTP\\n\\t/usr/local/go/src/net/http/server.go:2807\\nnet/http.(*conn).serve\\n\\t/usr/local/go/src/net/http/server.go:1895\\nruntime.goexit\\n\\t/usr/local/go/src/runtime/asm_amd64.s:1373\"}||proc_time=0.001687061
[INFO][2021-02-06T16:09:30.636][log.go:58] _com_request_in||args=map[]||from=172.31.50.45||traceid=ac1f32f9601e4ebafe3624fcf91335b0||uri=/trap/plugin/list?page=1&limit=20&info=||body=||cspanid=||spanid=cc017c436cde6308||method=GET
[INFO][2021-02-06T16:09:30.636][log.go:58] _com_mysql_success||level=sql||source=/root/go/src/github.com/wh1t3zer/Hawkeye-Go/dao/trap_plugin.go:67||current_time=2021-02-06 16:09:30||sql=SELECT * FROM `trap_plugin`   ORDER BY id asc LIMIT 20 OFFSET 0||affected_row=13||traceid=ac1f32f9601e4ebafe3624fcf91335b0||cspanid=||proc_time=0.004934s||spanid=cc017c436cde6308
[INFO][2021-02-06T16:09:30.636][log.go:58] _com_mysql_success||level=sql||spanid=cc017c436cde6308||affected_row=0||traceid=ac1f32f9601e4ebafe3624fcf91335b0||cspanid=||source=/root/go/src/github.com/wh1t3zer/Hawkeye-Go/dao/trap_plugin.go:71||current_time=2021-02-06 16:09:30||proc_time=0.000835s||sql=SELECT count(*) FROM `trap_plugin`  
[INFO][2021-02-06T16:09:30.636][log.go:58] _com_request_out||spanid=cc017c436cde6308||uri=/trap/plugin/list?page=1&limit=20&info=||args=map[]||response={\"errno\":0,\"errmsg\":\"\",\"data\":{\"total\":13,\"list\":[{\"id\":1,\"trap_id\":\"0001\",\"name\":\"whoisscanme TCP 蜜罐服务\",\"author\":\"jstang\",\"protocol\":\"TCP\",\"app_name\":\"TCP App\",\"honeypot\":\"whoisscanme\",\"desc\":\"whoisscanme TCP 蜜罐服务, 通过TCP使用空数据请求任意端口得到特征值: whoisscanme:https://github.com/bg6cq/whoisscanme\",\"content\":\"import socket\\nfrom pocsuite3.api import Output, POCBase, register_poc\\n\\n\\nclass WhoisScanMe(POCBase):\\n    vulID = '0001'\\n    author = ['jstang']\\n    name = 'whoisscanme TCP 蜜罐服务'\\n    project = 'whoisscanme'\\n    appName = 'TCP App'\\n    appVersion = 'None'\\n    desc = \\\"whoisscanme TCP 蜜罐服务, 通过TCP使用空数据请求任意端口得到特征值: whoisscanme:https://github.com/bg6cq/whoisscanme\\\"\\n\\n    def _attack(self):\\n        print(\\\"\\u003e\\u003e\\u003e\\u003eexecute _attack\\\")\\n        return self._verify()\\n\\n    def _verify(self):\\n        try:\\n            attr = self.target.split(':')\\n            # 1.创建套接字\\n            s = socket.socket()\\n            # 2.连接\\n            s.connect((attr[0], int(attr[1])))\\n            # 3.请求\\n            s.send(b'')  # TCP是面向字节流的协议,在进行TCP通信时都需要转成字节流才可以使用TCP协议进行传输。\\n            msg = s.recv(1024)\\n            print('From server: %!s(MISSING)' %!m(MISSING)sg)\\n            if 'whoisscanme' in str(msg):\\n                return self.parse_output({'verify': str(msg)})\\n        except Exception as e:\\n            print(e)\\n\\n        return self.parse_output({})\\n\\n    def parse_output(self, result):\\n        output = Output(self)\\n        if result:\\n            output.success(result)\\n        else:\\n            output.fail('The target looks safe!')\\n        return output\\n\\n\\nregister_poc(WhoisScanMe)\\n\",\"create_at\":\"1971-01-01 00:00:00\",\"update_at\":\"2021-02-03 11:01:41\",\"is_delete\":0},{\"id\":2,\"trap_id\":\"0002\",\"name\":\"Cowrie Telnet 蜜罐服务\",\"author\":\"jstang\",\"protocol\":\"TCP\",\"app_name\":\"Telnet\",\"honeypot\":\"Cowrie\",\"desc\":\"Cowrie Telnet 蜜罐服务, 通过TCP使用空数据请求23/2323端口得到特征值: \\\\\\\\xff\\\\\\\\xfd\\\\\\\\x1flogin:\",\"content\":\"# Dionaea 的Memcached协议举例，在实现Memcached协议时Dionaea在一些参数如：version、libevent和rusage_user等都是固定的。\\n# 仅需IP和端口\\nimport socket\\nfrom pocsuite3.api import Output, POCBase, register_poc\\n\\n\\nclass Cowrie(POCBase):\\n    vulID = '0002'\\n    author = ['jstang']\\n    name = \\\"Cowrie Telnet 蜜罐服务\\\"\\n    project = 'Cowrie'\\n    appName = 'Telnet'\\n    appVersion = 'None'\\n    desc = \\\"Cowrie Telnet 蜜罐服务, 通过TCP使用空数据请求23/2323端口得到特征值: \\\\\\\\xff\\\\\\\\xfd\\\\\\\\x1flogin:\\\"\\n\\n    def _attack(self):\\n        return self._verify()\\n\\n    def _verify(self):\\n        try:\\n            attr = self.target.split(':')\\n            # 0.必须是23/2323端口\\n            if attr[1] != str(23) and attr[1] != str(2323):\\n                return self.parse_output({})\\n\\n            # 1.创建套接字\\n            s = socket.socket()\\n            # 2.连接\\n            s.connect((attr[0], int(attr[1])))\\n            # 3.校验特征\\n            msg = s.recv(1024)\\n            print('From server: %!s(MISSING)' %!m(MISSING)sg)\\n            if '\\\\\\\\xff\\\\\\\\xfd\\\\\\\\x1flogin:' in str(msg):\\n                return self.parse_output({'verify': str(msg)})\\n        except Exception as e:\\n            print(e)\\n\\n        return self.parse_output({})\\n\\n    def parse_output(self, result):\\n        output = Output(self)\\n        if result:\\n            output.success(result)\\n        else:\\n            output.fail('The target looks safe!')\\n        return output\\n\\n\\nregister_poc(Cowrie)\\n\",\"create_at\":\"2021-02-01 11:49:27\",\"update_at\":\"2021-02-03 11:01:36\",\"is_delete\":0},{\"id\":3,\"trap_id\":\"0003\",\"name\":\"Amun IMAP 蜜罐服务\",\"author\":\"jstang\",\"protocol\":\"IMAP\",\"app_name\":\"IMAP\",\"honeypot\":\"Amun\",\"desc\":\"Amun IMAP 蜜罐服务, 通过imap协议使用数据(\\\\\\\\r\\\\\\\\n\\\\\\\\r\\\\\\\\n)请求143端口得到特征值: a001 OK LOGIN completed\",\"content\":\"# Dionaea 的Memcached协议举例，在实现Memcached协议时Dionaea在一些参数如：version、libevent和rusage_user等都是固定的。\\n# 仅需IP和端口\\nimport socket\\nfrom pocsuite3.api import Output, POCBase, register_poc\\n\\n\\nclass Amun(POCBase):\\n    vulID = '0003'\\n    author = ['jstang']\\n    name = \\\"Amun IMAP 蜜罐服务\\\"\\n    project = 'Amun'\\n    appName = 'IMAP'\\n    appVersion = 'None'\\n    desc = \\\"Amun IMAP 蜜罐服务, 通过imap协议使用数据(\\\\\\\\r\\\\\\\\n\\\\\\\\r\\\\\\\\n)请求143端口得到特征值: a001 OK LOGIN completed\\\"\\n\\n    def _attack(self):\\n        return self._verify()\\n\\n    def _verify(self):\\n        try:\\n            attr = self.target.split(':')\\n            if attr[1] != str(143):\\n                return self.parse_output({})\\n            # 1.创建套接字\\n            s = socket.socket()\\n            # 2.连接\\n            s.connect((attr[0], int(attr[1])))\\n            # 3.请求\\n            s.send(b'\\\\r\\\\n\\\\r\\\\n')  # TCP是面向字节流的协议,在进行TCP通信时都需要转成字节流才可以使用TCP协议进行传输。\\n            msg = s.recv(1024)\\n            print('From server: %!s(MISSING)' %!m(MISSING)sg)\\n            if 'a001' in str(msg) and 'OK' in str(msg) and 'LOGIN' in str(msg) and 'completed' in str(msg):\\n                return self.parse_output({'verify': str(msg)})\\n        except Exception as e:\\n            print(e)\\n\\n        return self.parse_output({})\\n\\n    def parse_output(self, result):\\n        output = Output(self)\\n        if result:\\n            output.success(result)\\n        else:\\n            output.fail('The target looks safe!')\\n        return output\\n\\n\\nregister_poc(Amun)\\n\",\"create_at\":\"2021-02-01 11:52:58\",\"update_at\":\"2021-02-03 11:01:30\",\"is_delete\":0},{\"id\":4,\"trap_id\":\"0004\",\"name\":\"Dionaea FTP 蜜罐服务\",\"author\":\"jstang\",\"protocol\":\"FTP\",\"app_name\":\"FTP\",\"honeypot\":\"Dionaea\",\"desc\":\"Dionaea FTP 蜜罐服务, 通过FTP协议使用空数据请求21端口得到特征值: 220 Welcome to the ftp service \\\\r\\\\n\",\"content\":\"import socket\\nfrom pocsuite3.api import Output, POCBase, register_poc\\n\\n\\nclass DionaeaFtp(POCBase):\\n    vulID = '0004'\\n    author = ['jstang']\\n    name = 'Dionaea FTP 蜜罐服务'\\n    project = 'Dionaea'\\n    appName = 'FTP'\\n    appVersion = 'None'\\n    desc = \\\"Dionaea FTP 蜜罐服务, 通过FTP协议使用空数据请求21端口得到特征值: 220 Welcome to the ftp service \\\\r\\\\n\\\"\\n\\n    def _attack(self):\\n        return self._verify()\\n\\n    def _verify(self):\\n        try:\\n            attr = self.target.split(':')\\n            if attr[1] != '21':\\n                return self.parse_output({})\\n            # 1.创建套接字\\n            s = socket.socket()\\n            # 2.连接\\n            s.connect((attr[0], int(attr[1])))\\n            # 3.请求\\n            s.send(b'\\\\\\\\r\\\\\\\\n\\\\\\\\r\\\\\\\\n')  # TCP是面向字节流的协议,在进行TCP通信时都需要转成字节流才可以使用TCP协议进行传输。\\n            msg = s.recv(1024)\\n            print('From server: %!s(MISSING)' %!m(MISSING)sg)\\n            if '220 Welcome to the ftp service' in str(msg):\\n                return self.parse_output({'verify': str(msg)})\\n        except Exception as e:\\n            print(e)\\n\\n        return self.parse_output({})\\n\\n    def parse_output(self, result):\\n        output = Output(self)\\n        if result:\\n            output.success(result)\\n        else:\\n            output.fail('The target looks safe!')\\n        return output\\n\\n\\nregister_poc(DionaeaFtp)\\n\",\"create_at\":\"2021-02-01 11:54:03\",\"update_at\":\"2021-02-03 11:01:24\",\"is_delete\":0},{\"id\":5,\"trap_id\":\"0005\",\"name\":\"Dionaea MSSQL 蜜罐服务\",\"author\":\"jstang\",\"protocol\":\"TCP\",\"app_name\":\"MSSQL\",\"honeypot\":\"Dionaea\",\"desc\":\"Dionaea MSSQL 蜜罐服务, 通过MSSQL协议使用空数据请求1443端口得到特征值: \\\\x04\\\\x01\\\\x00\\\\x2b\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x1a\\\\x00\\\\x06\\\\x01\\\\x00\\\\x20\\\\x00\\\\x01\\\\x02\\\\x00\\\\x21\\\\x00\\\\x01\\\\x03\\\\x00\\\\x22\\\\x00\\\\x00\\\\x04\\\\x00\\\\x22\\\\x00\\\\x01\\\\xff\\\\x08\\\\x00\\\\x02\\\\x10\\\\x00\\\\x00\\\\x02\\\\x00\\\\x00\",\"content\":\"import socket\\nfrom pocsuite3.api import Output, POCBase, register_poc\\n\\n\\nclass DionaeaMssql(POCBase):\\n    vulID = '0005'\\n    author = ['jstang']\\n    name = 'Dionaea MSSQL 蜜罐服务'\\n    project = 'Dionaea'\\n    appName = 'MSSQL'\\n    appVersion = 'None'\\n    desc = r\\\"Dionaea MSSQL 蜜罐服务, 通过MSSQL协议使用空数据请求1443端口得到特征值: \\\\x04\\\\x01\\\\x00\\\\x2b\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x1a\\\\x00\\\\x06\\\\x01\\\\x00\\\\x20\\\\x00\\\\x01\\\\x02\\\\x00\\\\x21\\\\x00\\\\x01\\\\x03\\\\x00\\\\x22\\\\x00\\\\x00\\\\x04\\\\x00\\\\x22\\\\x00\\\\x01\\\\xff\\\\x08\\\\x00\\\\x02\\\\x10\\\\x00\\\\x00\\\\x02\\\\x00\\\\x00\\\"\\n\\n    def _attack(self):\\n        return self._verify()\\n\\n    def _verify(self):\\n        try:\\n            attr = self.target.split(':')\\n            if attr[1] != '1443':\\n                return self.parse_output({})\\n            # 1.创建套接字\\n            s = socket.socket()\\n            # 2.连接\\n            s.connect((attr[0], int(attr[1])))\\n            # 3.请求\\n            s.send(b'\\\\\\\\r\\\\\\\\n\\\\\\\\r\\\\\\\\n')\\n            msg = s.recv(1024)\\n            print('From server: %!s(MISSING)' %!m(MISSING)sg)\\n            if r'\\\\x04\\\\x01\\\\x00\\\\x2b\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x1a\\\\x00\\\\x06\\\\x01\\\\x00\\\\x20\\\\x00\\\\x01\\\\x02\\\\x00\\\\x21\\\\x00\\\\x01\\\\x03\\\\x00\\\\x22\\\\x00\\\\x00\\\\x04\\\\x00\\\\x22\\\\x00\\\\x01\\\\xff\\\\x08\\\\x00\\\\x02\\\\x10\\\\x00\\\\x00\\\\x02\\\\x00\\\\x00' in self.bytesToHexString(msg):\\n                return self.parse_output({'verify': self.bytesToHexString(msg)})\\n        except Exception as e:\\n            print(e)\\n\\n        return self.parse_output({})\\n\\n    def bytesToHexString(self, bs: bytes):\\n        # hex_str = ''\\n        # for item in bs:\\n        #     hex_str += str(hex(item))[2:].zfill(2).upper() + \\\" \\\"\\n        # return hex_str\\n        return ''.join(['\\\\\\\\x%!x(MISSING)' %!b(MISSING) for b in bs])\\n\\n    def parse_output(self, result):\\n        output = Output(self)\\n        if result:\\n            output.success(result)\\n        else:\\n            output.fail('The target looks safe!')\\n        return output\\n\\n\\nregister_poc(DionaeaMssql)\\n\",\"create_at\":\"2021-02-01 11:55:07\",\"update_at\":\"2021-02-03 11:01:19\",\"is_delete\":0},{\"id\":6,\"trap_id\":\"0006\",\"name\":\"Kojoney SSH 蜜罐服务\",\"author\":\"jstang\",\"protocol\":\"SSH\",\"app_name\":\"SSH\",\"honeypot\":\"Kojoney\",\"desc\":\"Kojoney SSH 蜜罐服务, 通过imap协议使用空数据请求22/2222端口得到特征值: SSH-2.0-Twisted\\\\\\\\r\\\\\\\\n\",\"content\":\"import socket\\nfrom pocsuite3.api import Output, POCBase, register_poc\\n\\n\\nclass KojoneySSH(POCBase):\\n    vulID = '0006'\\n    author = ['jstang']\\n    name = 'Kojoney SSH 蜜罐服务'\\n    project = 'Kojoney'\\n    appName = 'SSH'\\n    appVersion = 'None'\\n    desc = \\\"Kojoney SSH 蜜罐服务, 通过imap协议使用空数据请求22/2222端口得到特征值: SSH-2.0-Twisted\\\\\\\\r\\\\\\\\n\\\"\\n\\n    def _attack(self):\\n        return self._verify()\\n\\n    def _verify(self):\\n        try:\\n            attr = self.target.split(':')\\n            if attr[1] != '22' and attr[1] != '2222':\\n                return self.parse_output({})\\n            # 1.创建套接字\\n            s = socket.socket()\\n            # 2.连接\\n            s.connect((attr[0], int(attr[1])))\\n            msg = s.recv(1024)\\n            print('From server: %!s(MISSING)' %!m(MISSING)sg)\\n            if 'SSH-2.0-Twisted' in str(msg):\\n                return self.parse_output({'verify': str(msg)})\\n        except Exception as e:\\n            print(e)\\n\\n        return self.parse_output({})\\n\\n    def parse_output(self, result):\\n        output = Output(self)\\n        if result:\\n            output.success(result)\\n        else:\\n            output.fail('The target looks safe!')\\n        return output\\n\\n\\nregister_poc(KojoneySSH)\\n\",\"create_at\":\"2021-02-01 11:55:51\",\"update_at\":\"2021-02-03 11:01:13\",\"is_delete\":0},{\"id\":7,\"trap_id\":\"0007\",\"name\":\"Nepenthes FTP 蜜罐服务\",\"author\":\"jstang\",\"protocol\":\"FTP\",\"app_name\":\"FTP\",\"honeypot\":\"Nepenthes\",\"desc\":\"Nepenthes FTP 蜜罐服务, 通过FTP协议使用空数据请求21端口得到特征值: ---freeFTPd 1.0---warFTPd 1.65---\\\\r\\\\n\",\"content\":\"import socket\\nfrom pocsuite3.api import Output, POCBase, register_poc\\n\\n\\nclass NepenthesFTP(POCBase):\\n    vulID = '0007'\\n    author = ['jstang']\\n    name = 'Nepenthes FTP 蜜罐服务'\\n    project = 'Nepenthes'\\n    appName = 'FTP'\\n    appVersion = 'None'\\n    desc = \\\"Nepenthes FTP 蜜罐服务, 通过FTP协议使用空数据请求21端口得到特征值: ---freeFTPd 1.0---warFTPd 1.65---\\\\r\\\\n\\\"\\n\\n    def _attack(self):\\n        return self._verify()\\n\\n    def _verify(self):\\n        try:\\n            attr = self.target.split(':')\\n            if attr[1] != '21':\\n                return self.parse_output({})\\n            # 1.创建套接字\\n            s = socket.socket()\\n            # 2.连接\\n            s.connect((attr[0], int(attr[1])))\\n            msg = s.recv(1024)\\n            print('From server: %!s(MISSING)' %!m(MISSING)sg)\\n            if '---freeFTPd 1.0---warFTPd 1.65---' in str(msg):\\n                return self.parse_output({'verify': str(msg)})\\n        except Exception as e:\\n            print(e)\\n\\n        return self.parse_output({})\\n\\n    def parse_output(self, result):\\n        output = Output(self)\\n        if result:\\n            output.success(result)\\n        else:\\n            output.fail('The target looks safe!')\\n        return output\\n\\n\\nregister_poc(NepenthesFTP)\\n\",\"create_at\":\"2021-02-01 11:56:41\",\"update_at\":\"2021-02-03 11:01:08\",\"is_delete\":0},{\"id\":8,\"trap_id\":\"0008\",\"name\":\"Nepenthes NETBIOS 蜜罐服务\",\"author\":\"jstang\",\"protocol\":\"TCP\",\"app_name\":\"NETBIOS\",\"honeypot\":\"Nepenthes\",\"desc\":\"Nepenthes NETBIOS 蜜罐服务, 通过NETBIOS协议使用空数据请求2103端口得到特征值: \\\\x82\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\",\"content\":\"import socket\\nfrom pocsuite3.api import Output, POCBase, register_poc\\n\\n\\nclass NepenthesNetbios(POCBase):\\n    vulID = '0008'\\n    author = ['jstang']\\n    name = 'Nepenthes NETBIOS 蜜罐服务'\\n    project = 'Nepenthes'\\n    appName = 'NETBIOS'\\n    appVersion = 'None'\\n    desc = \\\"Nepenthes NETBIOS 蜜罐服务, 通过NETBIOS协议使用空数据请求2103端口得到特征值: \\\\x82\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\"\\n\\n    def _attack(self):\\n        return self._verify()\\n\\n    def _verify(self):\\n        try:\\n            attr = self.target.split(':')\\n            if attr[1] != '2103':\\n                return self.parse_output({})\\n            # 1.创建套接字\\n            s = socket.socket()\\n            # 2.连接\\n            s.connect((attr[0], int(attr[1])))\\n            msg = s.recv(1024)\\n            print('From server: %!s(MISSING)' %!m(MISSING)sg)\\n            if r'\\\\x82\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00' in self.bytesToHexString(msg):\\n                return self.parse_output({'verify': self.bytesToHexString(msg)})\\n        except Exception as e:\\n            print(e)\\n\\n        return self.parse_output({})\\n\\n    def bytesToHexString(self, bs: bytes):\\n        # hex_str = ''\\n        # for item in bs:\\n        #     hex_str += str(hex(item))[2:].zfill(2).upper() + \\\" \\\"\\n        # return hex_str\\n        return ''.join(['\\\\\\\\x%!x(MISSING)' %!b(MISSING) for b in bs])\\n\\n    def parse_output(self, result):\\n        output = Output(self)\\n        if result:\\n            output.success(result)\\n        else:\\n            output.fail('The target looks safe!')\\n        return output\\n\\n\\nregister_poc(NepenthesNetbios)\\n\",\"create_at\":\"2021-02-01 11:57:49\",\"update_at\":\"2021-02-03 11:01:02\",\"is_delete\":0},{\"id\":9,\"trap_id\":\"0009\",\"name\":\"Conpot S7 蜜罐服务\",\"author\":\"jstang\",\"protocol\":\"TCP\",\"app_name\":\"S7\",\"honeypot\":\"Conpot\",\"desc\":\"Conpot S7 蜜罐服务, 通过S7协议使用空数据请求102端口得到特征值: Serial number of module: 88111222\",\"content\":\"import socket\\nfrom pocsuite3.api import Output, POCBase, register_poc\\n\\n\\nclass S7Conpot(POCBase):\\n    vulID = '0009'\\n    author = ['jstang']\\n    name = 'Conpot S7 蜜罐服务'\\n    project = 'Conpot'\\n    appName = 'S7'\\n    appVersion = 'None'\\n    desc = \\\"Conpot S7 蜜罐服务, 通过S7协议使用空数据请求102端口得到特征值: Serial number of module: 88111222\\\"\\n\\n    def _attack(self):\\n        return self._verify()\\n\\n    def _verify(self):\\n        try:\\n            attr = self.target.split(':')\\n            if attr[1] != '102':\\n                return self.parse_output({})\\n            # 1.创建套接字\\n            s = socket.socket()\\n            # 2.连接\\n            s.connect((attr[0], int(attr[1])))\\n            msg = s.recv(1024)\\n            print('From server: %!s(MISSING)' %!m(MISSING)sg)\\n            if 'Serial number of module:8811122' in str(msg):\\n                return self.parse_output({'verify': str(msg)})\\n        except Exception as e:\\n            print(e)\\n\\n        return self.parse_output({})\\n\\n    def parse_output(self, result):\\n        output = Output(self)\\n        if result:\\n            output.success(result)\\n        else:\\n            output.fail('The target looks safe!')\\n        return output\\n\\n\\nregister_poc(S7Conpot)\\n\",\"create_at\":\"2021-02-01 11:59:24\",\"update_at\":\"2021-02-03 11:00:57\",\"is_delete\":0},{\"id\":10,\"trap_id\":\"0010\",\"name\":\"Conpot Modbus 蜜罐服务\",\"author\":\"jstang\",\"protocol\":\"TCP\",\"app_name\":\"Modbus\",\"honeypot\":\"Conpot \",\"desc\":\"Conpot Modbus 蜜罐服务, 通过Modbus协议使用空数据请求502端口得到特征值: Device Identification: Siemems SIMATIC S7-200\",\"content\":\"import socket\\nfrom pocsuite3.api import Output, POCBase, register_poc\\n\\n\\nclass ConpotModbus(POCBase):\\n    vulID = '0010'\\n    author = ['jstang']\\n    name = 'Conpot Modbus 蜜罐服务'\\n    project = 'Conpot'\\n    appName = 'Modbus'\\n    appVersion = 'None'\\n    desc = \\\"Conpot Modbus 蜜罐服务, 通过Modbus协议使用空数据请求502端口得到特征值: Device Identification: Siemems SIMATIC S7-200\\\"\\n\\n    def _attack(self):\\n        return self._verify()\\n\\n    def _verify(self):\\n        try:\\n            attr = self.target.split(':')\\n            if attr[1] != '502':\\n                return self.parse_output({})\\n            # 1.创建套接字\\n            s = socket.socket()\\n            # 2.连接\\n            s.connect((attr[0], int(attr[1])))\\n            msg = s.recv(1024)\\n            print('From server: %!s(MISSING)' %!m(MISSING)sg)\\n            if 'Device Identification: Siemems SIMATIC S7-200' in str(msg):\\n                return self.parse_output({'verify': str(msg)})\\n        except Exception as e:\\n            print(e)\\n\\n        return self.parse_output({})\\n\\n    def parse_output(self, result):\\n        output = Output(self)\\n        if result:\\n            output.success(result)\\n        else:\\n            output.fail('The target looks safe!')\\n        return output\\n\\n\\nregister_poc(ConpotModbus)\\n\",\"create_at\":\"2021-02-01 11:59:51\",\"update_at\":\"2021-02-03 11:00:52\",\"is_delete\":0},{\"id\":11,\"trap_id\":\"0011\",\"name\":\"Dionaea Memcache 蜜罐服务\",\"author\":\"jstang\",\"protocol\":\"TCP\",\"app_name\":\"Memcache\",\"honeypot\":\"Dionaea\",\"desc\":\"Dionaea Memcached协议举例,在实现Memcached协议时Dionaea把很多参数做了随机化,但是在一些参数如: version,libevent和rusage_user等都是固定的.\",\"content\":\"# Dionaea 的Memcached协议举例，在实现Memcached协议时Dionaea在一些参数如：version、libevent和rusage_user等都是固定的。\\n# 仅需IP和端口\\nimport memcache\\nfrom pocsuite3.api import Output, POCBase, register_poc\\n\\n\\nclass MemcacheHoneypot(POCBase):\\n    vulID = '0011'  # ssvid\\n    author = ['jstang']\\n    name = \\\"Dionaea Memcache 蜜罐服务\\\"\\n    project = 'Dionaea'\\n    appName = 'Memcache'\\n    appVersion = 'None'\\n    desc = \\\"Dionaea Memcached协议举例,在实现Memcached协议时Dionaea把很多参数做了随机化,但是在一些参数如: version,libevent和rusage_user等都是固定的.\\\"\\n\\n    def _attack(self):\\n        print(\\\"\\u003e\\u003e\\u003e\\u003eexecute _attack\\\")\\n        return self._verify()\\n\\n    def _verify(self):\\n        try:\\n            attr = self.target.split(':')\\n            if attr[1] != '11211':\\n                return self.parse_output({})\\n\\n            array = []\\n            mc = memcache.Client([self.target])\\n            stats = mc.get_stats()\\n\\n            data = stats[0]\\n            data = data[1]\\n            if data['version'] == '1.6.9': \\n                array.append(\\\"Non randomized features: version=1.4.25\\\")\\n            if data['libevent'] == '2.0.22-stable':\\n                array.append(\\\"Non randomized features: libevent=2.0.22-stable\\\")\\n            if data['rusage_system'] == \\\"0.233\\\":\\n                array.append(\\\"Non randomized features: rusage_system=0.233\\\")\\n            if data['rusage_user'] == \\\"0.550000\\\":\\n                array.append(\\\"Non randomized features: rusage_user=0.550000\\\")\\n\\n            if not array:\\n                return self.parse_output({})\\n            return self.parse_output({'verify': ','.join(array)})\\n        except Exception as e:\\n            print(e)\\n            return self.parse_output({})\\n\\n    def parse_output(self, result):\\n        output = Output(self)\\n        if result:\\n            output.success(result)\\n        else:\\n            output.fail('target is not vulnerable')\\n        return output\\n\\n\\nregister_poc(MemcacheHoneypot)\\n\\n'''\\n[\\n    (\\n        '172.31.50.249:11211 (1)',\\n        {\\n            'pid': '1', 'uptime': '231', 'time': '1612091156', 'version': '1.6.9',\\n            'libevent': '2.1.8-stable', 'pointer_size': '64', 'rusage_user': '0.058336',\\n            'rusage_system': '0.019894', 'max_connections': '1024', 'curr_connections': '2',\\n            'total_connections': '7', 'rejected_connections': '0', 'connection_structures': '3',\\n            'response_obj_oom': '0', 'response_obj_count': '1', 'response_obj_bytes': '65536',\\n            'read_buf_count': '8', 'read_buf_bytes': '131072', 'read_buf_bytes_free': '49152',\\n            'read_buf_oom': '0', 'reserved_fds': '20', 'cmd_get': '0', 'cmd_set': '0',\\n            'cmd_flush': '0', 'cmd_touch': '0', 'cmd_meta': '0', 'get_hits': '0',\\n            'get_misses': '0', 'get_expired': '0', 'get_flushed': '0', 'delete_misses': '0',\\n            'delete_hits': '0', 'incr_misses': '0', 'incr_hits': '0', 'decr_misses': '0',\\n            'decr_hits': '0', 'cas_misses': '0', 'cas_hits': '0', 'cas_badval': '0',\\n            'touch_hits': '0', 'touch_misses': '0', 'auth_cmds': '0', 'auth_errors': '0',\\n            'bytes_read': '35', 'bytes_written': '8553', 'limit_maxbytes': '67108864',\\n            'accepting_conns': '1', 'listen_disabled_num': '0',\\n            'time_in_listen_disabled_us': '0', 'threads': '4', 'conn_yields': '0',\\n            'hash_power_level': '16', 'hash_bytes': '524288', 'hash_is_expanding': '0',\\n            'slab_reassign_rescues': '0', 'slab_reassign_chunk_rescues': '0',\\n            'slab_reassign_evictions_nomem': '0', 'slab_reassign_inline_reclaim': '0',\\n            'slab_reassign_busy_items': '0', 'slab_reassign_busy_deletes': '0',\\n            'slab_reassign_running': '0', 'slabs_moved': '0', 'lru_crawler_running': '0',\\n            'lru_crawler_starts': '3', 'lru_maintainer_juggles': '281', 'malloc_fails': '0',\\n            'log_worker_dropped': '0', 'log_worker_written': '0', 'log_watcher_skipped': '0',\\n            'log_watcher_sent': '0', 'unexpected_napi_ids': '0', 'round_robin_fallback': '0',\\n            'bytes': '0', 'curr_items': '0', 'total_items': '0', 'slab_global_page_pool': '0',\\n            'expired_unfetched': '0', 'evicted_unfetched': '0', 'evicted_active': '0',\\n            'evictions': '0', 'reclaimed': '0', 'crawler_reclaimed': '0',\\n            'crawler_items_checked': '0', 'lrutail_reflocked': '0', 'moves_to_cold': '0',\\n            'moves_to_warm': '0', 'moves_within_lru': '0', 'direct_reclaims': '0',\\n            'lru_bumps_dropped': '0'\\n        }\\n    )\\n]\\n'''\\n\",\"create_at\":\"2021-02-01 12:00:27\",\"update_at\":\"2021-02-03 11:10:39\",\"is_delete\":0},{\"id\":12,\"trap_id\":\"0012\",\"name\":\"Dionaea Sipd 蜜罐服务\",\"author\":\"jstang\",\"protocol\":\"TCP\",\"app_name\":\"Sipd\",\"honeypot\":\"Dionaea\",\"desc\":\"Dionaea Sipd 蜜罐服务, 通过Sipd协议使用空数据请求5060端口得到特征值: From:sip:nm@nm;tag=root\",\"content\":\"import socket\\nfrom pocsuite3.api import Output, POCBase, register_poc\\n\\n\\nclass DionaeaSipd(POCBase):\\n    vulID = '0012'\\n    author = ['jstang']\\n    name = 'Dionaea Sipd 蜜罐服务'\\n    project = 'Dionaea'\\n    appName = 'Sipd'\\n    appVersion = 'None'\\n    desc = \\\"Dionaea Sipd 蜜罐服务, 通过Sipd协议使用空数据请求5060端口得到特征值: From:sip:nm@nm;tag=root\\\"\\n\\n    def _attack(self):\\n        return self._verify()\\n\\n    def _verify(self):\\n        try:\\n            attr = self.target.split(':')\\n            if attr[1] != '5060':\\n                return self.parse_output({})\\n            # 1.创建套接字\\n            s = socket.socket()\\n            # 2.连接\\n            s.connect((attr[0], int(attr[1])))\\n            msg = s.recv(1024)\\n            print('From server: %!s(MISSING)' %!m(MISSING)sg)\\n            if 'From:sip:nm@nm;tag=root' in str(msg):\\n                return self.parse_output({'verify': str(msg)})\\n        except Exception as e:\\n            print(e)\\n\\n        return self.parse_output({})\\n\\n    def parse_output(self, result):\\n        output = Output(self)\\n        if result:\\n            output.success(result)\\n        else:\\n            output.fail('The target looks safe!')\\n        return output\\n\\n\\nregister_poc(DionaeaSipd)\\n\",\"create_at\":\"2021-02-01 12:01:05\",\"update_at\":\"2021-02-03 11:00:40\",\"is_delete\":0},{\"id\":13,\"trap_id\":\"0013\",\"name\":\"sshesame SSH 蜜罐服务\",\"author\":\"jstang\",\"protocol\":\"SSH\",\"app_name\":\"SSH\",\"honeypot\":\"sshesame\",\"desc\":\"sshesame SSH 蜜罐服务, 通过SSH协议使用空数据请求2022端口得到特征值: SSH-2.0-sshesame\",\"content\":\"import socket\\nfrom pocsuite3.api import Output, POCBase, register_poc\\n\\n\\nclass SSHesame(POCBase):\\n    vulID = '0013'\\n    author = ['jstang']\\n    name = 'sshesame SSH 蜜罐服务'\\n    project = 'sshesame'\\n    appName = 'SSH'\\n    appVersion = 'None'\\n    desc = \\\"sshesame SSH 蜜罐服务, 通过SSH协议使用空数据请求2022端口得到特征值: SSH-2.0-sshesame\\\"\\n\\n    def _attack(self):\\n        return self._verify()\\n\\n    def _verify(self):\\n        try:\\n            attr = self.target.split(':')\\n            if attr[1] != '2022':\\n                return self.parse_output({})\\n            # 1.创建套接字\\n            s = socket.socket()\\n            # 2.连接\\n            s.connect((attr[0], int(attr[1])))\\n            msg = s.recv(1024)\\n            print('From server: %!s(MISSING)' %!m(MISSING)sg)\\n            if 'SSH-2.0-sshesame' in str(msg):\\n                return self.parse_output({'verify': str(msg)})\\n        except Exception as e:\\n            print(e)\\n\\n        return self.parse_output({})\\n\\n    def parse_output(self, result):\\n        output = Output(self)\\n        if result:\\n            output.success(result)\\n        else:\\n            output.fail('The target looks safe!')\\n        return output\\n\\n\\nregister_poc(SSHesame)\\n\",\"create_at\":\"2021-02-01 12:01:36\",\"update_at\":\"2021-02-03 11:00:30\",\"is_delete\":0}]},\"trace_id\":\"ac1f32f9601e4ebafe3624fcf91335b0\",\"stack\":null}||cspanid=||method=GET||from=172.31.50.45||proc_time=0.008536169||traceid=ac1f32f9601e4ebafe3624fcf91335b0
[INFO][2021-02-06T16:12:01.115][log.go:58] _com_request_in||args=map[]||spanid=cc017da80525129c||uri=/trap/plugin/list?page=1&limit=20&info=||method=GET||body=||from=172.31.50.45||traceid=ac1f32f9601e4f51619b24fcc1c428b0||cspanid=
[INFO][2021-02-06T16:12:01.115][log.go:58] _com_mysql_success||cspanid=||spanid=cc017da80525129c||level=sql||source=/root/go/src/github.com/wh1t3zer/Hawkeye-Go/dao/trap_plugin.go:67||current_time=2021-02-06 16:12:01||proc_time=0.002734s||sql=SELECT * FROM `trap_plugin`   ORDER BY id asc LIMIT 20 OFFSET 0||affected_row=13||traceid=ac1f32f9601e4f51619b24fcc1c428b0
[INFO][2021-02-06T16:12:01.115][log.go:58] _com_mysql_success||cspanid=||source=/root/go/src/github.com/wh1t3zer/Hawkeye-Go/dao/trap_plugin.go:71||current_time=2021-02-06 16:12:01||proc_time=0.000480s||sql=SELECT count(*) FROM `trap_plugin`  ||affected_row=0||level=sql||traceid=ac1f32f9601e4f51619b24fcc1c428b0||spanid=cc017da80525129c
[INFO][2021-02-06T16:12:01.115][log.go:58] _com_request_out||cspanid=||uri=/trap/plugin/list?page=1&limit=20&info=||args=map[]||from=172.31.50.45||response={\"errno\":0,\"errmsg\":\"\",\"data\":{\"total\":13,\"list\":[{\"id\":1,\"trap_id\":\"0001\",\"name\":\"whoisscanme TCP 蜜罐服务\",\"author\":\"jstang\",\"protocol\":\"TCP\",\"app_name\":\"TCP App\",\"honeypot\":\"whoisscanme\",\"desc\":\"whoisscanme TCP 蜜罐服务, 通过TCP使用空数据请求任意端口得到特征值: whoisscanme:https://github.com/bg6cq/whoisscanme\",\"content\":\"import socket\\nfrom pocsuite3.api import Output, POCBase, register_poc\\n\\n\\nclass WhoisScanMe(POCBase):\\n    vulID = '0001'\\n    author = ['jstang']\\n    name = 'whoisscanme TCP 蜜罐服务'\\n    project = 'whoisscanme'\\n    appName = 'TCP App'\\n    appVersion = 'None'\\n    desc = \\\"whoisscanme TCP 蜜罐服务, 通过TCP使用空数据请求任意端口得到特征值: whoisscanme:https://github.com/bg6cq/whoisscanme\\\"\\n\\n    def _attack(self):\\n        print(\\\"\\u003e\\u003e\\u003e\\u003eexecute _attack\\\")\\n        return self._verify()\\n\\n    def _verify(self):\\n        try:\\n            attr = self.target.split(':')\\n            # 1.创建套接字\\n            s = socket.socket()\\n            # 2.连接\\n            s.connect((attr[0], int(attr[1])))\\n            # 3.请求\\n            s.send(b'')  # TCP是面向字节流的协议,在进行TCP通信时都需要转成字节流才可以使用TCP协议进行传输。\\n            msg = s.recv(1024)\\n            print('From server: %!s(MISSING)' %!m(MISSING)sg)\\n            if 'whoisscanme' in str(msg):\\n                return self.parse_output({'verify': str(msg)})\\n        except Exception as e:\\n            print(e)\\n\\n        return self.parse_output({})\\n\\n    def parse_output(self, result):\\n        output = Output(self)\\n        if result:\\n            output.success(result)\\n        else:\\n            output.fail('The target looks safe!')\\n        return output\\n\\n\\nregister_poc(WhoisScanMe)\\n\",\"create_at\":\"1971-01-01 00:00:00\",\"update_at\":\"2021-02-03 11:01:41\",\"is_delete\":0},{\"id\":2,\"trap_id\":\"0002\",\"name\":\"Cowrie Telnet 蜜罐服务\",\"author\":\"jstang\",\"protocol\":\"TCP\",\"app_name\":\"Telnet\",\"honeypot\":\"Cowrie\",\"desc\":\"Cowrie Telnet 蜜罐服务, 通过TCP使用空数据请求23/2323端口得到特征值: \\\\\\\\xff\\\\\\\\xfd\\\\\\\\x1flogin:\",\"content\":\"# Dionaea 的Memcached协议举例，在实现Memcached协议时Dionaea在一些参数如：version、libevent和rusage_user等都是固定的。\\n# 仅需IP和端口\\nimport socket\\nfrom pocsuite3.api import Output, POCBase, register_poc\\n\\n\\nclass Cowrie(POCBase):\\n    vulID = '0002'\\n    author = ['jstang']\\n    name = \\\"Cowrie Telnet 蜜罐服务\\\"\\n    project = 'Cowrie'\\n    appName = 'Telnet'\\n    appVersion = 'None'\\n    desc = \\\"Cowrie Telnet 蜜罐服务, 通过TCP使用空数据请求23/2323端口得到特征值: \\\\\\\\xff\\\\\\\\xfd\\\\\\\\x1flogin:\\\"\\n\\n    def _attack(self):\\n        return self._verify()\\n\\n    def _verify(self):\\n        try:\\n            attr = self.target.split(':')\\n            # 0.必须是23/2323端口\\n            if attr[1] != str(23) and attr[1] != str(2323):\\n                return self.parse_output({})\\n\\n            # 1.创建套接字\\n            s = socket.socket()\\n            # 2.连接\\n            s.connect((attr[0], int(attr[1])))\\n            # 3.校验特征\\n            msg = s.recv(1024)\\n            print('From server: %!s(MISSING)' %!m(MISSING)sg)\\n            if '\\\\\\\\xff\\\\\\\\xfd\\\\\\\\x1flogin:' in str(msg):\\n                return self.parse_output({'verify': str(msg)})\\n        except Exception as e:\\n            print(e)\\n\\n        return self.parse_output({})\\n\\n    def parse_output(self, result):\\n        output = Output(self)\\n        if result:\\n            output.success(result)\\n        else:\\n            output.fail('The target looks safe!')\\n        return output\\n\\n\\nregister_poc(Cowrie)\\n\",\"create_at\":\"2021-02-01 11:49:27\",\"update_at\":\"2021-02-03 11:01:36\",\"is_delete\":0},{\"id\":3,\"trap_id\":\"0003\",\"name\":\"Amun IMAP 蜜罐服务\",\"author\":\"jstang\",\"protocol\":\"IMAP\",\"app_name\":\"IMAP\",\"honeypot\":\"Amun\",\"desc\":\"Amun IMAP 蜜罐服务, 通过imap协议使用数据(\\\\\\\\r\\\\\\\\n\\\\\\\\r\\\\\\\\n)请求143端口得到特征值: a001 OK LOGIN completed\",\"content\":\"# Dionaea 的Memcached协议举例，在实现Memcached协议时Dionaea在一些参数如：version、libevent和rusage_user等都是固定的。\\n# 仅需IP和端口\\nimport socket\\nfrom pocsuite3.api import Output, POCBase, register_poc\\n\\n\\nclass Amun(POCBase):\\n    vulID = '0003'\\n    author = ['jstang']\\n    name = \\\"Amun IMAP 蜜罐服务\\\"\\n    project = 'Amun'\\n    appName = 'IMAP'\\n    appVersion = 'None'\\n    desc = \\\"Amun IMAP 蜜罐服务, 通过imap协议使用数据(\\\\\\\\r\\\\\\\\n\\\\\\\\r\\\\\\\\n)请求143端口得到特征值: a001 OK LOGIN completed\\\"\\n\\n    def _attack(self):\\n        return self._verify()\\n\\n    def _verify(self):\\n        try:\\n            attr = self.target.split(':')\\n            if attr[1] != str(143):\\n                return self.parse_output({})\\n            # 1.创建套接字\\n            s = socket.socket()\\n            # 2.连接\\n            s.connect((attr[0], int(attr[1])))\\n            # 3.请求\\n            s.send(b'\\\\r\\\\n\\\\r\\\\n')  # TCP是面向字节流的协议,在进行TCP通信时都需要转成字节流才可以使用TCP协议进行传输。\\n            msg = s.recv(1024)\\n            print('From server: %!s(MISSING)' %!m(MISSING)sg)\\n            if 'a001' in str(msg) and 'OK' in str(msg) and 'LOGIN' in str(msg) and 'completed' in str(msg):\\n                return self.parse_output({'verify': str(msg)})\\n        except Exception as e:\\n            print(e)\\n\\n        return self.parse_output({})\\n\\n    def parse_output(self, result):\\n        output = Output(self)\\n        if result:\\n            output.success(result)\\n        else:\\n            output.fail('The target looks safe!')\\n        return output\\n\\n\\nregister_poc(Amun)\\n\",\"create_at\":\"2021-02-01 11:52:58\",\"update_at\":\"2021-02-03 11:01:30\",\"is_delete\":0},{\"id\":4,\"trap_id\":\"0004\",\"name\":\"Dionaea FTP 蜜罐服务\",\"author\":\"jstang\",\"protocol\":\"FTP\",\"app_name\":\"FTP\",\"honeypot\":\"Dionaea\",\"desc\":\"Dionaea FTP 蜜罐服务, 通过FTP协议使用空数据请求21端口得到特征值: 220 Welcome to the ftp service \\\\r\\\\n\",\"content\":\"import socket\\nfrom pocsuite3.api import Output, POCBase, register_poc\\n\\n\\nclass DionaeaFtp(POCBase):\\n    vulID = '0004'\\n    author = ['jstang']\\n    name = 'Dionaea FTP 蜜罐服务'\\n    project = 'Dionaea'\\n    appName = 'FTP'\\n    appVersion = 'None'\\n    desc = \\\"Dionaea FTP 蜜罐服务, 通过FTP协议使用空数据请求21端口得到特征值: 220 Welcome to the ftp service \\\\r\\\\n\\\"\\n\\n    def _attack(self):\\n        return self._verify()\\n\\n    def _verify(self):\\n        try:\\n            attr = self.target.split(':')\\n            if attr[1] != '21':\\n                return self.parse_output({})\\n            # 1.创建套接字\\n            s = socket.socket()\\n            # 2.连接\\n            s.connect((attr[0], int(attr[1])))\\n            # 3.请求\\n            s.send(b'\\\\\\\\r\\\\\\\\n\\\\\\\\r\\\\\\\\n')  # TCP是面向字节流的协议,在进行TCP通信时都需要转成字节流才可以使用TCP协议进行传输。\\n            msg = s.recv(1024)\\n            print('From server: %!s(MISSING)' %!m(MISSING)sg)\\n            if '220 Welcome to the ftp service' in str(msg):\\n                return self.parse_output({'verify': str(msg)})\\n        except Exception as e:\\n            print(e)\\n\\n        return self.parse_output({})\\n\\n    def parse_output(self, result):\\n        output = Output(self)\\n        if result:\\n            output.success(result)\\n        else:\\n            output.fail('The target looks safe!')\\n        return output\\n\\n\\nregister_poc(DionaeaFtp)\\n\",\"create_at\":\"2021-02-01 11:54:03\",\"update_at\":\"2021-02-03 11:01:24\",\"is_delete\":0},{\"id\":5,\"trap_id\":\"0005\",\"name\":\"Dionaea MSSQL 蜜罐服务\",\"author\":\"jstang\",\"protocol\":\"TCP\",\"app_name\":\"MSSQL\",\"honeypot\":\"Dionaea\",\"desc\":\"Dionaea MSSQL 蜜罐服务, 通过MSSQL协议使用空数据请求1443端口得到特征值: \\\\x04\\\\x01\\\\x00\\\\x2b\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x1a\\\\x00\\\\x06\\\\x01\\\\x00\\\\x20\\\\x00\\\\x01\\\\x02\\\\x00\\\\x21\\\\x00\\\\x01\\\\x03\\\\x00\\\\x22\\\\x00\\\\x00\\\\x04\\\\x00\\\\x22\\\\x00\\\\x01\\\\xff\\\\x08\\\\x00\\\\x02\\\\x10\\\\x00\\\\x00\\\\x02\\\\x00\\\\x00\",\"content\":\"import socket\\nfrom pocsuite3.api import Output, POCBase, register_poc\\n\\n\\nclass DionaeaMssql(POCBase):\\n    vulID = '0005'\\n    author = ['jstang']\\n    name = 'Dionaea MSSQL 蜜罐服务'\\n    project = 'Dionaea'\\n    appName = 'MSSQL'\\n    appVersion = 'None'\\n    desc = r\\\"Dionaea MSSQL 蜜罐服务, 通过MSSQL协议使用空数据请求1443端口得到特征值: \\\\x04\\\\x01\\\\x00\\\\x2b\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x1a\\\\x00\\\\x06\\\\x01\\\\x00\\\\x20\\\\x00\\\\x01\\\\x02\\\\x00\\\\x21\\\\x00\\\\x01\\\\x03\\\\x00\\\\x22\\\\x00\\\\x00\\\\x04\\\\x00\\\\x22\\\\x00\\\\x01\\\\xff\\\\x08\\\\x00\\\\x02\\\\x10\\\\x00\\\\x00\\\\x02\\\\x00\\\\x00\\\"\\n\\n    def _attack(self):\\n        return self._verify()\\n\\n    def _verify(self):\\n        try:\\n            attr = self.target.split(':')\\n            if attr[1] != '1443':\\n                return self.parse_output({})\\n            # 1.创建套接字\\n            s = socket.socket()\\n            # 2.连接\\n            s.connect((attr[0], int(attr[1])))\\n            # 3.请求\\n            s.send(b'\\\\\\\\r\\\\\\\\n\\\\\\\\r\\\\\\\\n')\\n            msg = s.recv(1024)\\n            print('From server: %!s(MISSING)' %!m(MISSING)sg)\\n            if r'\\\\x04\\\\x01\\\\x00\\\\x2b\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x1a\\\\x00\\\\x06\\\\x01\\\\x00\\\\x20\\\\x00\\\\x01\\\\x02\\\\x00\\\\x21\\\\x00\\\\x01\\\\x03\\\\x00\\\\x22\\\\x00\\\\x00\\\\x04\\\\x00\\\\x22\\\\x00\\\\x01\\\\xff\\\\x08\\\\x00\\\\x02\\\\x10\\\\x00\\\\x00\\\\x02\\\\x00\\\\x00' in self.bytesToHexString(msg):\\n                return self.parse_output({'verify': self.bytesToHexString(msg)})\\n        except Exception as e:\\n            print(e)\\n\\n        return self.parse_output({})\\n\\n    def bytesToHexString(self, bs: bytes):\\n        # hex_str = ''\\n        # for item in bs:\\n        #     hex_str += str(hex(item))[2:].zfill(2).upper() + \\\" \\\"\\n        # return hex_str\\n        return ''.join(['\\\\\\\\x%!x(MISSING)' %!b(MISSING) for b in bs])\\n\\n    def parse_output(self, result):\\n        output = Output(self)\\n        if result:\\n            output.success(result)\\n        else:\\n            output.fail('The target looks safe!')\\n        return output\\n\\n\\nregister_poc(DionaeaMssql)\\n\",\"create_at\":\"2021-02-01 11:55:07\",\"update_at\":\"2021-02-03 11:01:19\",\"is_delete\":0},{\"id\":6,\"trap_id\":\"0006\",\"name\":\"Kojoney SSH 蜜罐服务\",\"author\":\"jstang\",\"protocol\":\"SSH\",\"app_name\":\"SSH\",\"honeypot\":\"Kojoney\",\"desc\":\"Kojoney SSH 蜜罐服务, 通过imap协议使用空数据请求22/2222端口得到特征值: SSH-2.0-Twisted\\\\\\\\r\\\\\\\\n\",\"content\":\"import socket\\nfrom pocsuite3.api import Output, POCBase, register_poc\\n\\n\\nclass KojoneySSH(POCBase):\\n    vulID = '0006'\\n    author = ['jstang']\\n    name = 'Kojoney SSH 蜜罐服务'\\n    project = 'Kojoney'\\n    appName = 'SSH'\\n    appVersion = 'None'\\n    desc = \\\"Kojoney SSH 蜜罐服务, 通过imap协议使用空数据请求22/2222端口得到特征值: SSH-2.0-Twisted\\\\\\\\r\\\\\\\\n\\\"\\n\\n    def _attack(self):\\n        return self._verify()\\n\\n    def _verify(self):\\n        try:\\n            attr = self.target.split(':')\\n            if attr[1] != '22' and attr[1] != '2222':\\n                return self.parse_output({})\\n            # 1.创建套接字\\n            s = socket.socket()\\n            # 2.连接\\n            s.connect((attr[0], int(attr[1])))\\n            msg = s.recv(1024)\\n            print('From server: %!s(MISSING)' %!m(MISSING)sg)\\n            if 'SSH-2.0-Twisted' in str(msg):\\n                return self.parse_output({'verify': str(msg)})\\n        except Exception as e:\\n            print(e)\\n\\n        return self.parse_output({})\\n\\n    def parse_output(self, result):\\n        output = Output(self)\\n        if result:\\n            output.success(result)\\n        else:\\n            output.fail('The target looks safe!')\\n        return output\\n\\n\\nregister_poc(KojoneySSH)\\n\",\"create_at\":\"2021-02-01 11:55:51\",\"update_at\":\"2021-02-03 11:01:13\",\"is_delete\":0},{\"id\":7,\"trap_id\":\"0007\",\"name\":\"Nepenthes FTP 蜜罐服务\",\"author\":\"jstang\",\"protocol\":\"FTP\",\"app_name\":\"FTP\",\"honeypot\":\"Nepenthes\",\"desc\":\"Nepenthes FTP 蜜罐服务, 通过FTP协议使用空数据请求21端口得到特征值: ---freeFTPd 1.0---warFTPd 1.65---\\\\r\\\\n\",\"content\":\"import socket\\nfrom pocsuite3.api import Output, POCBase, register_poc\\n\\n\\nclass NepenthesFTP(POCBase):\\n    vulID = '0007'\\n    author = ['jstang']\\n    name = 'Nepenthes FTP 蜜罐服务'\\n    project = 'Nepenthes'\\n    appName = 'FTP'\\n    appVersion = 'None'\\n    desc = \\\"Nepenthes FTP 蜜罐服务, 通过FTP协议使用空数据请求21端口得到特征值: ---freeFTPd 1.0---warFTPd 1.65---\\\\r\\\\n\\\"\\n\\n    def _attack(self):\\n        return self._verify()\\n\\n    def _verify(self):\\n        try:\\n            attr = self.target.split(':')\\n            if attr[1] != '21':\\n                return self.parse_output({})\\n            # 1.创建套接字\\n            s = socket.socket()\\n            # 2.连接\\n            s.connect((attr[0], int(attr[1])))\\n            msg = s.recv(1024)\\n            print('From server: %!s(MISSING)' %!m(MISSING)sg)\\n            if '---freeFTPd 1.0---warFTPd 1.65---' in str(msg):\\n                return self.parse_output({'verify': str(msg)})\\n        except Exception as e:\\n            print(e)\\n\\n        return self.parse_output({})\\n\\n    def parse_output(self, result):\\n        output = Output(self)\\n        if result:\\n            output.success(result)\\n        else:\\n            output.fail('The target looks safe!')\\n        return output\\n\\n\\nregister_poc(NepenthesFTP)\\n\",\"create_at\":\"2021-02-01 11:56:41\",\"update_at\":\"2021-02-03 11:01:08\",\"is_delete\":0},{\"id\":8,\"trap_id\":\"0008\",\"name\":\"Nepenthes NETBIOS 蜜罐服务\",\"author\":\"jstang\",\"protocol\":\"TCP\",\"app_name\":\"NETBIOS\",\"honeypot\":\"Nepenthes\",\"desc\":\"Nepenthes NETBIOS 蜜罐服务, 通过NETBIOS协议使用空数据请求2103端口得到特征值: \\\\x82\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\",\"content\":\"import socket\\nfrom pocsuite3.api import Output, POCBase, register_poc\\n\\n\\nclass NepenthesNetbios(POCBase):\\n    vulID = '0008'\\n    author = ['jstang']\\n    name = 'Nepenthes NETBIOS 蜜罐服务'\\n    project = 'Nepenthes'\\n    appName = 'NETBIOS'\\n    appVersion = 'None'\\n    desc = \\\"Nepenthes NETBIOS 蜜罐服务, 通过NETBIOS协议使用空数据请求2103端口得到特征值: \\\\x82\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\"\\n\\n    def _attack(self):\\n        return self._verify()\\n\\n    def _verify(self):\\n        try:\\n            attr = self.target.split(':')\\n            if attr[1] != '2103':\\n                return self.parse_output({})\\n            # 1.创建套接字\\n            s = socket.socket()\\n            # 2.连接\\n            s.connect((attr[0], int(attr[1])))\\n            msg = s.recv(1024)\\n            print('From server: %!s(MISSING)' %!m(MISSING)sg)\\n            if r'\\\\x82\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00' in self.bytesToHexString(msg):\\n                return self.parse_output({'verify': self.bytesToHexString(msg)})\\n        except Exception as e:\\n            print(e)\\n\\n        return self.parse_output({})\\n\\n    def bytesToHexString(self, bs: bytes):\\n        # hex_str = ''\\n        # for item in bs:\\n        #     hex_str += str(hex(item))[2:].zfill(2).upper() + \\\" \\\"\\n        # return hex_str\\n        return ''.join(['\\\\\\\\x%!x(MISSING)' %!b(MISSING) for b in bs])\\n\\n    def parse_output(self, result):\\n        output = Output(self)\\n        if result:\\n            output.success(result)\\n        else:\\n            output.fail('The target looks safe!')\\n        return output\\n\\n\\nregister_poc(NepenthesNetbios)\\n\",\"create_at\":\"2021-02-01 11:57:49\",\"update_at\":\"2021-02-03 11:01:02\",\"is_delete\":0},{\"id\":9,\"trap_id\":\"0009\",\"name\":\"Conpot S7 蜜罐服务\",\"author\":\"jstang\",\"protocol\":\"TCP\",\"app_name\":\"S7\",\"honeypot\":\"Conpot\",\"desc\":\"Conpot S7 蜜罐服务, 通过S7协议使用空数据请求102端口得到特征值: Serial number of module: 88111222\",\"content\":\"import socket\\nfrom pocsuite3.api import Output, POCBase, register_poc\\n\\n\\nclass S7Conpot(POCBase):\\n    vulID = '0009'\\n    author = ['jstang']\\n    name = 'Conpot S7 蜜罐服务'\\n    project = 'Conpot'\\n    appName = 'S7'\\n    appVersion = 'None'\\n    desc = \\\"Conpot S7 蜜罐服务, 通过S7协议使用空数据请求102端口得到特征值: Serial number of module: 88111222\\\"\\n\\n    def _attack(self):\\n        return self._verify()\\n\\n    def _verify(self):\\n        try:\\n            attr = self.target.split(':')\\n            if attr[1] != '102':\\n                return self.parse_output({})\\n            # 1.创建套接字\\n            s = socket.socket()\\n            # 2.连接\\n            s.connect((attr[0], int(attr[1])))\\n            msg = s.recv(1024)\\n            print('From server: %!s(MISSING)' %!m(MISSING)sg)\\n            if 'Serial number of module:8811122' in str(msg):\\n                return self.parse_output({'verify': str(msg)})\\n        except Exception as e:\\n            print(e)\\n\\n        return self.parse_output({})\\n\\n    def parse_output(self, result):\\n        output = Output(self)\\n        if result:\\n            output.success(result)\\n        else:\\n            output.fail('The target looks safe!')\\n        return output\\n\\n\\nregister_poc(S7Conpot)\\n\",\"create_at\":\"2021-02-01 11:59:24\",\"update_at\":\"2021-02-03 11:00:57\",\"is_delete\":0},{\"id\":10,\"trap_id\":\"0010\",\"name\":\"Conpot Modbus 蜜罐服务\",\"author\":\"jstang\",\"protocol\":\"TCP\",\"app_name\":\"Modbus\",\"honeypot\":\"Conpot \",\"desc\":\"Conpot Modbus 蜜罐服务, 通过Modbus协议使用空数据请求502端口得到特征值: Device Identification: Siemems SIMATIC S7-200\",\"content\":\"import socket\\nfrom pocsuite3.api import Output, POCBase, register_poc\\n\\n\\nclass ConpotModbus(POCBase):\\n    vulID = '0010'\\n    author = ['jstang']\\n    name = 'Conpot Modbus 蜜罐服务'\\n    project = 'Conpot'\\n    appName = 'Modbus'\\n    appVersion = 'None'\\n    desc = \\\"Conpot Modbus 蜜罐服务, 通过Modbus协议使用空数据请求502端口得到特征值: Device Identification: Siemems SIMATIC S7-200\\\"\\n\\n    def _attack(self):\\n        return self._verify()\\n\\n    def _verify(self):\\n        try:\\n            attr = self.target.split(':')\\n            if attr[1] != '502':\\n                return self.parse_output({})\\n            # 1.创建套接字\\n            s = socket.socket()\\n            # 2.连接\\n            s.connect((attr[0], int(attr[1])))\\n            msg = s.recv(1024)\\n            print('From server: %!s(MISSING)' %!m(MISSING)sg)\\n            if 'Device Identification: Siemems SIMATIC S7-200' in str(msg):\\n                return self.parse_output({'verify': str(msg)})\\n        except Exception as e:\\n            print(e)\\n\\n        return self.parse_output({})\\n\\n    def parse_output(self, result):\\n        output = Output(self)\\n        if result:\\n            output.success(result)\\n        else:\\n            output.fail('The target looks safe!')\\n        return output\\n\\n\\nregister_poc(ConpotModbus)\\n\",\"create_at\":\"2021-02-01 11:59:51\",\"update_at\":\"2021-02-03 11:00:52\",\"is_delete\":0},{\"id\":11,\"trap_id\":\"0011\",\"name\":\"Dionaea Memcache 蜜罐服务\",\"author\":\"jstang\",\"protocol\":\"TCP\",\"app_name\":\"Memcache\",\"honeypot\":\"Dionaea\",\"desc\":\"Dionaea Memcached协议举例,在实现Memcached协议时Dionaea把很多参数做了随机化,但是在一些参数如: version,libevent和rusage_user等都是固定的.\",\"content\":\"# Dionaea 的Memcached协议举例，在实现Memcached协议时Dionaea在一些参数如：version、libevent和rusage_user等都是固定的。\\n# 仅需IP和端口\\nimport memcache\\nfrom pocsuite3.api import Output, POCBase, register_poc\\n\\n\\nclass MemcacheHoneypot(POCBase):\\n    vulID = '0011'  # ssvid\\n    author = ['jstang']\\n    name = \\\"Dionaea Memcache 蜜罐服务\\\"\\n    project = 'Dionaea'\\n    appName = 'Memcache'\\n    appVersion = 'None'\\n    desc = \\\"Dionaea Memcached协议举例,在实现Memcached协议时Dionaea把很多参数做了随机化,但是在一些参数如: version,libevent和rusage_user等都是固定的.\\\"\\n\\n    def _attack(self):\\n        print(\\\"\\u003e\\u003e\\u003e\\u003eexecute _attack\\\")\\n        return self._verify()\\n\\n    def _verify(self):\\n        try:\\n            attr = self.target.split(':')\\n            if attr[1] != '11211':\\n                return self.parse_output({})\\n\\n            array = []\\n            mc = memcache.Client([self.target])\\n            stats = mc.get_stats()\\n\\n            data = stats[0]\\n            data = data[1]\\n            if data['version'] == '1.6.9': \\n                array.append(\\\"Non randomized features: version=1.4.25\\\")\\n            if data['libevent'] == '2.0.22-stable':\\n                array.append(\\\"Non randomized features: libevent=2.0.22-stable\\\")\\n            if data['rusage_system'] == \\\"0.233\\\":\\n                array.append(\\\"Non randomized features: rusage_system=0.233\\\")\\n            if data['rusage_user'] == \\\"0.550000\\\":\\n                array.append(\\\"Non randomized features: rusage_user=0.550000\\\")\\n\\n            if not array:\\n                return self.parse_output({})\\n            return self.parse_output({'verify': ','.join(array)})\\n        except Exception as e:\\n            print(e)\\n            return self.parse_output({})\\n\\n    def parse_output(self, result):\\n        output = Output(self)\\n        if result:\\n            output.success(result)\\n        else:\\n            output.fail('target is not vulnerable')\\n        return output\\n\\n\\nregister_poc(MemcacheHoneypot)\\n\\n'''\\n[\\n    (\\n        '172.31.50.249:11211 (1)',\\n        {\\n            'pid': '1', 'uptime': '231', 'time': '1612091156', 'version': '1.6.9',\\n            'libevent': '2.1.8-stable', 'pointer_size': '64', 'rusage_user': '0.058336',\\n            'rusage_system': '0.019894', 'max_connections': '1024', 'curr_connections': '2',\\n            'total_connections': '7', 'rejected_connections': '0', 'connection_structures': '3',\\n            'response_obj_oom': '0', 'response_obj_count': '1', 'response_obj_bytes': '65536',\\n            'read_buf_count': '8', 'read_buf_bytes': '131072', 'read_buf_bytes_free': '49152',\\n            'read_buf_oom': '0', 'reserved_fds': '20', 'cmd_get': '0', 'cmd_set': '0',\\n            'cmd_flush': '0', 'cmd_touch': '0', 'cmd_meta': '0', 'get_hits': '0',\\n            'get_misses': '0', 'get_expired': '0', 'get_flushed': '0', 'delete_misses': '0',\\n            'delete_hits': '0', 'incr_misses': '0', 'incr_hits': '0', 'decr_misses': '0',\\n            'decr_hits': '0', 'cas_misses': '0', 'cas_hits': '0', 'cas_badval': '0',\\n            'touch_hits': '0', 'touch_misses': '0', 'auth_cmds': '0', 'auth_errors': '0',\\n            'bytes_read': '35', 'bytes_written': '8553', 'limit_maxbytes': '67108864',\\n            'accepting_conns': '1', 'listen_disabled_num': '0',\\n            'time_in_listen_disabled_us': '0', 'threads': '4', 'conn_yields': '0',\\n            'hash_power_level': '16', 'hash_bytes': '524288', 'hash_is_expanding': '0',\\n            'slab_reassign_rescues': '0', 'slab_reassign_chunk_rescues': '0',\\n            'slab_reassign_evictions_nomem': '0', 'slab_reassign_inline_reclaim': '0',\\n            'slab_reassign_busy_items': '0', 'slab_reassign_busy_deletes': '0',\\n            'slab_reassign_running': '0', 'slabs_moved': '0', 'lru_crawler_running': '0',\\n            'lru_crawler_starts': '3', 'lru_maintainer_juggles': '281', 'malloc_fails': '0',\\n            'log_worker_dropped': '0', 'log_worker_written': '0', 'log_watcher_skipped': '0',\\n            'log_watcher_sent': '0', 'unexpected_napi_ids': '0', 'round_robin_fallback': '0',\\n            'bytes': '0', 'curr_items': '0', 'total_items': '0', 'slab_global_page_pool': '0',\\n            'expired_unfetched': '0', 'evicted_unfetched': '0', 'evicted_active': '0',\\n            'evictions': '0', 'reclaimed': '0', 'crawler_reclaimed': '0',\\n            'crawler_items_checked': '0', 'lrutail_reflocked': '0', 'moves_to_cold': '0',\\n            'moves_to_warm': '0', 'moves_within_lru': '0', 'direct_reclaims': '0',\\n            'lru_bumps_dropped': '0'\\n        }\\n    )\\n]\\n'''\\n\",\"create_at\":\"2021-02-01 12:00:27\",\"update_at\":\"2021-02-03 11:10:39\",\"is_delete\":0},{\"id\":12,\"trap_id\":\"0012\",\"name\":\"Dionaea Sipd 蜜罐服务\",\"author\":\"jstang\",\"protocol\":\"TCP\",\"app_name\":\"Sipd\",\"honeypot\":\"Dionaea\",\"desc\":\"Dionaea Sipd 蜜罐服务, 通过Sipd协议使用空数据请求5060端口得到特征值: From:sip:nm@nm;tag=root\",\"content\":\"import socket\\nfrom pocsuite3.api import Output, POCBase, register_poc\\n\\n\\nclass DionaeaSipd(POCBase):\\n    vulID = '0012'\\n    author = ['jstang']\\n    name = 'Dionaea Sipd 蜜罐服务'\\n    project = 'Dionaea'\\n    appName = 'Sipd'\\n    appVersion = 'None'\\n    desc = \\\"Dionaea Sipd 蜜罐服务, 通过Sipd协议使用空数据请求5060端口得到特征值: From:sip:nm@nm;tag=root\\\"\\n\\n    def _attack(self):\\n        return self._verify()\\n\\n    def _verify(self):\\n        try:\\n            attr = self.target.split(':')\\n            if attr[1] != '5060':\\n                return self.parse_output({})\\n            # 1.创建套接字\\n            s = socket.socket()\\n            # 2.连接\\n            s.connect((attr[0], int(attr[1])))\\n            msg = s.recv(1024)\\n            print('From server: %!s(MISSING)' %!m(MISSING)sg)\\n            if 'From:sip:nm@nm;tag=root' in str(msg):\\n                return self.parse_output({'verify': str(msg)})\\n        except Exception as e:\\n            print(e)\\n\\n        return self.parse_output({})\\n\\n    def parse_output(self, result):\\n        output = Output(self)\\n        if result:\\n            output.success(result)\\n        else:\\n            output.fail('The target looks safe!')\\n        return output\\n\\n\\nregister_poc(DionaeaSipd)\\n\",\"create_at\":\"2021-02-01 12:01:05\",\"update_at\":\"2021-02-03 11:00:40\",\"is_delete\":0},{\"id\":13,\"trap_id\":\"0013\",\"name\":\"sshesame SSH 蜜罐服务\",\"author\":\"jstang\",\"protocol\":\"SSH\",\"app_name\":\"SSH\",\"honeypot\":\"sshesame\",\"desc\":\"sshesame SSH 蜜罐服务, 通过SSH协议使用空数据请求2022端口得到特征值: SSH-2.0-sshesame\",\"content\":\"import socket\\nfrom pocsuite3.api import Output, POCBase, register_poc\\n\\n\\nclass SSHesame(POCBase):\\n    vulID = '0013'\\n    author = ['jstang']\\n    name = 'sshesame SSH 蜜罐服务'\\n    project = 'sshesame'\\n    appName = 'SSH'\\n    appVersion = 'None'\\n    desc = \\\"sshesame SSH 蜜罐服务, 通过SSH协议使用空数据请求2022端口得到特征值: SSH-2.0-sshesame\\\"\\n\\n    def _attack(self):\\n        return self._verify()\\n\\n    def _verify(self):\\n        try:\\n            attr = self.target.split(':')\\n            if attr[1] != '2022':\\n                return self.parse_output({})\\n            # 1.创建套接字\\n            s = socket.socket()\\n            # 2.连接\\n            s.connect((attr[0], int(attr[1])))\\n            msg = s.recv(1024)\\n            print('From server: %!s(MISSING)' %!m(MISSING)sg)\\n            if 'SSH-2.0-sshesame' in str(msg):\\n                return self.parse_output({'verify': str(msg)})\\n        except Exception as e:\\n            print(e)\\n\\n        return self.parse_output({})\\n\\n    def parse_output(self, result):\\n        output = Output(self)\\n        if result:\\n            output.success(result)\\n        else:\\n            output.fail('The target looks safe!')\\n        return output\\n\\n\\nregister_poc(SSHesame)\\n\",\"create_at\":\"2021-02-01 12:01:36\",\"update_at\":\"2021-02-03 11:00:30\",\"is_delete\":0}]},\"trace_id\":\"ac1f32f9601e4f51619b24fcc1c428b0\",\"stack\":null}||proc_time=0.00626971||traceid=ac1f32f9601e4f51619b24fcc1c428b0||spanid=cc017da80525129c||method=GET
[INFO][2021-02-06T16:12:30.251][log.go:58] _com_request_in||method=GET||from=172.31.50.45||spanid=cc017d97499c2b32||traceid=ac1f32f9601e4f6ed40624fc2d6c92b0||cspanid=||uri=/trap/plugin/list?page=1&limit=20&info=||args=map[]||body=
[INFO][2021-02-06T16:12:30.251][log.go:58] _com_mysql_success||traceid=ac1f32f9601e4f6ed40624fc2d6c92b0||sql=SELECT * FROM `trap_plugin`   ORDER BY id asc LIMIT 20 OFFSET 0||affected_row=13||cspanid=||spanid=cc017d97499c2b32||level=sql||source=/root/go/src/github.com/wh1t3zer/Hawkeye-Go/dao/trap_plugin.go:67||current_time=2021-02-06 16:12:30||proc_time=0.001620s
[INFO][2021-02-06T16:12:30.251][log.go:58] _com_mysql_success||traceid=ac1f32f9601e4f6ed40624fc2d6c92b0||spanid=cc017d97499c2b32||level=sql||current_time=2021-02-06 16:12:30||proc_time=0.000726s||sql=SELECT count(*) FROM `trap_plugin`  ||affected_row=0||source=/root/go/src/github.com/wh1t3zer/Hawkeye-Go/dao/trap_plugin.go:71||cspanid=
[INFO][2021-02-06T16:12:30.251][log.go:58] _com_request_out||method=GET||proc_time=0.004879977||spanid=cc017d97499c2b32||traceid=ac1f32f9601e4f6ed40624fc2d6c92b0||cspanid=||uri=/trap/plugin/list?page=1&limit=20&info=||args=map[]||from=172.31.50.45||response={\"errno\":0,\"errmsg\":\"\",\"data\":{\"total\":13,\"list\":[{\"id\":1,\"trap_id\":\"0001\",\"name\":\"whoisscanme TCP 蜜罐服务\",\"author\":\"jstang\",\"protocol\":\"TCP\",\"app_name\":\"TCP App\",\"honeypot\":\"whoisscanme\",\"desc\":\"whoisscanme TCP 蜜罐服务, 通过TCP使用空数据请求任意端口得到特征值: whoisscanme:https://github.com/bg6cq/whoisscanme\",\"content\":\"import socket\\nfrom pocsuite3.api import Output, POCBase, register_poc\\n\\n\\nclass WhoisScanMe(POCBase):\\n    vulID = '0001'\\n    author = ['jstang']\\n    name = 'whoisscanme TCP 蜜罐服务'\\n    project = 'whoisscanme'\\n    appName = 'TCP App'\\n    appVersion = 'None'\\n    desc = \\\"whoisscanme TCP 蜜罐服务, 通过TCP使用空数据请求任意端口得到特征值: whoisscanme:https://github.com/bg6cq/whoisscanme\\\"\\n\\n    def _attack(self):\\n        print(\\\"\\u003e\\u003e\\u003e\\u003eexecute _attack\\\")\\n        return self._verify()\\n\\n    def _verify(self):\\n        try:\\n            attr = self.target.split(':')\\n            # 1.创建套接字\\n            s = socket.socket()\\n            # 2.连接\\n            s.connect((attr[0], int(attr[1])))\\n            # 3.请求\\n            s.send(b'')  # TCP是面向字节流的协议,在进行TCP通信时都需要转成字节流才可以使用TCP协议进行传输。\\n            msg = s.recv(1024)\\n            print('From server: %!s(MISSING)' %!m(MISSING)sg)\\n            if 'whoisscanme' in str(msg):\\n                return self.parse_output({'verify': str(msg)})\\n        except Exception as e:\\n            print(e)\\n\\n        return self.parse_output({})\\n\\n    def parse_output(self, result):\\n        output = Output(self)\\n        if result:\\n            output.success(result)\\n        else:\\n            output.fail('The target looks safe!')\\n        return output\\n\\n\\nregister_poc(WhoisScanMe)\\n\",\"create_at\":\"1971-01-01 00:00:00\",\"update_at\":\"2021-02-03 11:01:41\",\"is_delete\":0},{\"id\":2,\"trap_id\":\"0002\",\"name\":\"Cowrie Telnet 蜜罐服务\",\"author\":\"jstang\",\"protocol\":\"TCP\",\"app_name\":\"Telnet\",\"honeypot\":\"Cowrie\",\"desc\":\"Cowrie Telnet 蜜罐服务, 通过TCP使用空数据请求23/2323端口得到特征值: \\\\\\\\xff\\\\\\\\xfd\\\\\\\\x1flogin:\",\"content\":\"# Dionaea 的Memcached协议举例，在实现Memcached协议时Dionaea在一些参数如：version、libevent和rusage_user等都是固定的。\\n# 仅需IP和端口\\nimport socket\\nfrom pocsuite3.api import Output, POCBase, register_poc\\n\\n\\nclass Cowrie(POCBase):\\n    vulID = '0002'\\n    author = ['jstang']\\n    name = \\\"Cowrie Telnet 蜜罐服务\\\"\\n    project = 'Cowrie'\\n    appName = 'Telnet'\\n    appVersion = 'None'\\n    desc = \\\"Cowrie Telnet 蜜罐服务, 通过TCP使用空数据请求23/2323端口得到特征值: \\\\\\\\xff\\\\\\\\xfd\\\\\\\\x1flogin:\\\"\\n\\n    def _attack(self):\\n        return self._verify()\\n\\n    def _verify(self):\\n        try:\\n            attr = self.target.split(':')\\n            # 0.必须是23/2323端口\\n            if attr[1] != str(23) and attr[1] != str(2323):\\n                return self.parse_output({})\\n\\n            # 1.创建套接字\\n            s = socket.socket()\\n            # 2.连接\\n            s.connect((attr[0], int(attr[1])))\\n            # 3.校验特征\\n            msg = s.recv(1024)\\n            print('From server: %!s(MISSING)' %!m(MISSING)sg)\\n            if '\\\\\\\\xff\\\\\\\\xfd\\\\\\\\x1flogin:' in str(msg):\\n                return self.parse_output({'verify': str(msg)})\\n        except Exception as e:\\n            print(e)\\n\\n        return self.parse_output({})\\n\\n    def parse_output(self, result):\\n        output = Output(self)\\n        if result:\\n            output.success(result)\\n        else:\\n            output.fail('The target looks safe!')\\n        return output\\n\\n\\nregister_poc(Cowrie)\\n\",\"create_at\":\"2021-02-01 11:49:27\",\"update_at\":\"2021-02-03 11:01:36\",\"is_delete\":0},{\"id\":3,\"trap_id\":\"0003\",\"name\":\"Amun IMAP 蜜罐服务\",\"author\":\"jstang\",\"protocol\":\"IMAP\",\"app_name\":\"IMAP\",\"honeypot\":\"Amun\",\"desc\":\"Amun IMAP 蜜罐服务, 通过imap协议使用数据(\\\\\\\\r\\\\\\\\n\\\\\\\\r\\\\\\\\n)请求143端口得到特征值: a001 OK LOGIN completed\",\"content\":\"# Dionaea 的Memcached协议举例，在实现Memcached协议时Dionaea在一些参数如：version、libevent和rusage_user等都是固定的。\\n# 仅需IP和端口\\nimport socket\\nfrom pocsuite3.api import Output, POCBase, register_poc\\n\\n\\nclass Amun(POCBase):\\n    vulID = '0003'\\n    author = ['jstang']\\n    name = \\\"Amun IMAP 蜜罐服务\\\"\\n    project = 'Amun'\\n    appName = 'IMAP'\\n    appVersion = 'None'\\n    desc = \\\"Amun IMAP 蜜罐服务, 通过imap协议使用数据(\\\\\\\\r\\\\\\\\n\\\\\\\\r\\\\\\\\n)请求143端口得到特征值: a001 OK LOGIN completed\\\"\\n\\n    def _attack(self):\\n        return self._verify()\\n\\n    def _verify(self):\\n        try:\\n            attr = self.target.split(':')\\n            if attr[1] != str(143):\\n                return self.parse_output({})\\n            # 1.创建套接字\\n            s = socket.socket()\\n            # 2.连接\\n            s.connect((attr[0], int(attr[1])))\\n            # 3.请求\\n            s.send(b'\\\\r\\\\n\\\\r\\\\n')  # TCP是面向字节流的协议,在进行TCP通信时都需要转成字节流才可以使用TCP协议进行传输。\\n            msg = s.recv(1024)\\n            print('From server: %!s(MISSING)' %!m(MISSING)sg)\\n            if 'a001' in str(msg) and 'OK' in str(msg) and 'LOGIN' in str(msg) and 'completed' in str(msg):\\n                return self.parse_output({'verify': str(msg)})\\n        except Exception as e:\\n            print(e)\\n\\n        return self.parse_output({})\\n\\n    def parse_output(self, result):\\n        output = Output(self)\\n        if result:\\n            output.success(result)\\n        else:\\n            output.fail('The target looks safe!')\\n        return output\\n\\n\\nregister_poc(Amun)\\n\",\"create_at\":\"2021-02-01 11:52:58\",\"update_at\":\"2021-02-03 11:01:30\",\"is_delete\":0},{\"id\":4,\"trap_id\":\"0004\",\"name\":\"Dionaea FTP 蜜罐服务\",\"author\":\"jstang\",\"protocol\":\"FTP\",\"app_name\":\"FTP\",\"honeypot\":\"Dionaea\",\"desc\":\"Dionaea FTP 蜜罐服务, 通过FTP协议使用空数据请求21端口得到特征值: 220 Welcome to the ftp service \\\\r\\\\n\",\"content\":\"import socket\\nfrom pocsuite3.api import Output, POCBase, register_poc\\n\\n\\nclass DionaeaFtp(POCBase):\\n    vulID = '0004'\\n    author = ['jstang']\\n    name = 'Dionaea FTP 蜜罐服务'\\n    project = 'Dionaea'\\n    appName = 'FTP'\\n    appVersion = 'None'\\n    desc = \\\"Dionaea FTP 蜜罐服务, 通过FTP协议使用空数据请求21端口得到特征值: 220 Welcome to the ftp service \\\\r\\\\n\\\"\\n\\n    def _attack(self):\\n        return self._verify()\\n\\n    def _verify(self):\\n        try:\\n            attr = self.target.split(':')\\n            if attr[1] != '21':\\n                return self.parse_output({})\\n            # 1.创建套接字\\n            s = socket.socket()\\n            # 2.连接\\n            s.connect((attr[0], int(attr[1])))\\n            # 3.请求\\n            s.send(b'\\\\\\\\r\\\\\\\\n\\\\\\\\r\\\\\\\\n')  # TCP是面向字节流的协议,在进行TCP通信时都需要转成字节流才可以使用TCP协议进行传输。\\n            msg = s.recv(1024)\\n            print('From server: %!s(MISSING)' %!m(MISSING)sg)\\n            if '220 Welcome to the ftp service' in str(msg):\\n                return self.parse_output({'verify': str(msg)})\\n        except Exception as e:\\n            print(e)\\n\\n        return self.parse_output({})\\n\\n    def parse_output(self, result):\\n        output = Output(self)\\n        if result:\\n            output.success(result)\\n        else:\\n            output.fail('The target looks safe!')\\n        return output\\n\\n\\nregister_poc(DionaeaFtp)\\n\",\"create_at\":\"2021-02-01 11:54:03\",\"update_at\":\"2021-02-03 11:01:24\",\"is_delete\":0},{\"id\":5,\"trap_id\":\"0005\",\"name\":\"Dionaea MSSQL 蜜罐服务\",\"author\":\"jstang\",\"protocol\":\"TCP\",\"app_name\":\"MSSQL\",\"honeypot\":\"Dionaea\",\"desc\":\"Dionaea MSSQL 蜜罐服务, 通过MSSQL协议使用空数据请求1443端口得到特征值: \\\\x04\\\\x01\\\\x00\\\\x2b\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x1a\\\\x00\\\\x06\\\\x01\\\\x00\\\\x20\\\\x00\\\\x01\\\\x02\\\\x00\\\\x21\\\\x00\\\\x01\\\\x03\\\\x00\\\\x22\\\\x00\\\\x00\\\\x04\\\\x00\\\\x22\\\\x00\\\\x01\\\\xff\\\\x08\\\\x00\\\\x02\\\\x10\\\\x00\\\\x00\\\\x02\\\\x00\\\\x00\",\"content\":\"import socket\\nfrom pocsuite3.api import Output, POCBase, register_poc\\n\\n\\nclass DionaeaMssql(POCBase):\\n    vulID = '0005'\\n    author = ['jstang']\\n    name = 'Dionaea MSSQL 蜜罐服务'\\n    project = 'Dionaea'\\n    appName = 'MSSQL'\\n    appVersion = 'None'\\n    desc = r\\\"Dionaea MSSQL 蜜罐服务, 通过MSSQL协议使用空数据请求1443端口得到特征值: \\\\x04\\\\x01\\\\x00\\\\x2b\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x1a\\\\x00\\\\x06\\\\x01\\\\x00\\\\x20\\\\x00\\\\x01\\\\x02\\\\x00\\\\x21\\\\x00\\\\x01\\\\x03\\\\x00\\\\x22\\\\x00\\\\x00\\\\x04\\\\x00\\\\x22\\\\x00\\\\x01\\\\xff\\\\x08\\\\x00\\\\x02\\\\x10\\\\x00\\\\x00\\\\x02\\\\x00\\\\x00\\\"\\n\\n    def _attack(self):\\n        return self._verify()\\n\\n    def _verify(self):\\n        try:\\n            attr = self.target.split(':')\\n            if attr[1] != '1443':\\n                return self.parse_output({})\\n            # 1.创建套接字\\n            s = socket.socket()\\n            # 2.连接\\n            s.connect((attr[0], int(attr[1])))\\n            # 3.请求\\n            s.send(b'\\\\\\\\r\\\\\\\\n\\\\\\\\r\\\\\\\\n')\\n            msg = s.recv(1024)\\n            print('From server: %!s(MISSING)' %!m(MISSING)sg)\\n            if r'\\\\x04\\\\x01\\\\x00\\\\x2b\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x1a\\\\x00\\\\x06\\\\x01\\\\x00\\\\x20\\\\x00\\\\x01\\\\x02\\\\x00\\\\x21\\\\x00\\\\x01\\\\x03\\\\x00\\\\x22\\\\x00\\\\x00\\\\x04\\\\x00\\\\x22\\\\x00\\\\x01\\\\xff\\\\x08\\\\x00\\\\x02\\\\x10\\\\x00\\\\x00\\\\x02\\\\x00\\\\x00' in self.bytesToHexString(msg):\\n                return self.parse_output({'verify': self.bytesToHexString(msg)})\\n        except Exception as e:\\n            print(e)\\n\\n        return self.parse_output({})\\n\\n    def bytesToHexString(self, bs: bytes):\\n        # hex_str = ''\\n        # for item in bs:\\n        #     hex_str += str(hex(item))[2:].zfill(2).upper() + \\\" \\\"\\n        # return hex_str\\n        return ''.join(['\\\\\\\\x%!x(MISSING)' %!b(MISSING) for b in bs])\\n\\n    def parse_output(self, result):\\n        output = Output(self)\\n        if result:\\n            output.success(result)\\n        else:\\n            output.fail('The target looks safe!')\\n        return output\\n\\n\\nregister_poc(DionaeaMssql)\\n\",\"create_at\":\"2021-02-01 11:55:07\",\"update_at\":\"2021-02-03 11:01:19\",\"is_delete\":0},{\"id\":6,\"trap_id\":\"0006\",\"name\":\"Kojoney SSH 蜜罐服务\",\"author\":\"jstang\",\"protocol\":\"SSH\",\"app_name\":\"SSH\",\"honeypot\":\"Kojoney\",\"desc\":\"Kojoney SSH 蜜罐服务, 通过imap协议使用空数据请求22/2222端口得到特征值: SSH-2.0-Twisted\\\\\\\\r\\\\\\\\n\",\"content\":\"import socket\\nfrom pocsuite3.api import Output, POCBase, register_poc\\n\\n\\nclass KojoneySSH(POCBase):\\n    vulID = '0006'\\n    author = ['jstang']\\n    name = 'Kojoney SSH 蜜罐服务'\\n    project = 'Kojoney'\\n    appName = 'SSH'\\n    appVersion = 'None'\\n    desc = \\\"Kojoney SSH 蜜罐服务, 通过imap协议使用空数据请求22/2222端口得到特征值: SSH-2.0-Twisted\\\\\\\\r\\\\\\\\n\\\"\\n\\n    def _attack(self):\\n        return self._verify()\\n\\n    def _verify(self):\\n        try:\\n            attr = self.target.split(':')\\n            if attr[1] != '22' and attr[1] != '2222':\\n                return self.parse_output({})\\n            # 1.创建套接字\\n            s = socket.socket()\\n            # 2.连接\\n            s.connect((attr[0], int(attr[1])))\\n            msg = s.recv(1024)\\n            print('From server: %!s(MISSING)' %!m(MISSING)sg)\\n            if 'SSH-2.0-Twisted' in str(msg):\\n                return self.parse_output({'verify': str(msg)})\\n        except Exception as e:\\n            print(e)\\n\\n        return self.parse_output({})\\n\\n    def parse_output(self, result):\\n        output = Output(self)\\n        if result:\\n            output.success(result)\\n        else:\\n            output.fail('The target looks safe!')\\n        return output\\n\\n\\nregister_poc(KojoneySSH)\\n\",\"create_at\":\"2021-02-01 11:55:51\",\"update_at\":\"2021-02-03 11:01:13\",\"is_delete\":0},{\"id\":7,\"trap_id\":\"0007\",\"name\":\"Nepenthes FTP 蜜罐服务\",\"author\":\"jstang\",\"protocol\":\"FTP\",\"app_name\":\"FTP\",\"honeypot\":\"Nepenthes\",\"desc\":\"Nepenthes FTP 蜜罐服务, 通过FTP协议使用空数据请求21端口得到特征值: ---freeFTPd 1.0---warFTPd 1.65---\\\\r\\\\n\",\"content\":\"import socket\\nfrom pocsuite3.api import Output, POCBase, register_poc\\n\\n\\nclass NepenthesFTP(POCBase):\\n    vulID = '0007'\\n    author = ['jstang']\\n    name = 'Nepenthes FTP 蜜罐服务'\\n    project = 'Nepenthes'\\n    appName = 'FTP'\\n    appVersion = 'None'\\n    desc = \\\"Nepenthes FTP 蜜罐服务, 通过FTP协议使用空数据请求21端口得到特征值: ---freeFTPd 1.0---warFTPd 1.65---\\\\r\\\\n\\\"\\n\\n    def _attack(self):\\n        return self._verify()\\n\\n    def _verify(self):\\n        try:\\n            attr = self.target.split(':')\\n            if attr[1] != '21':\\n                return self.parse_output({})\\n            # 1.创建套接字\\n            s = socket.socket()\\n            # 2.连接\\n            s.connect((attr[0], int(attr[1])))\\n            msg = s.recv(1024)\\n            print('From server: %!s(MISSING)' %!m(MISSING)sg)\\n            if '---freeFTPd 1.0---warFTPd 1.65---' in str(msg):\\n                return self.parse_output({'verify': str(msg)})\\n        except Exception as e:\\n            print(e)\\n\\n        return self.parse_output({})\\n\\n    def parse_output(self, result):\\n        output = Output(self)\\n        if result:\\n            output.success(result)\\n        else:\\n            output.fail('The target looks safe!')\\n        return output\\n\\n\\nregister_poc(NepenthesFTP)\\n\",\"create_at\":\"2021-02-01 11:56:41\",\"update_at\":\"2021-02-03 11:01:08\",\"is_delete\":0},{\"id\":8,\"trap_id\":\"0008\",\"name\":\"Nepenthes NETBIOS 蜜罐服务\",\"author\":\"jstang\",\"protocol\":\"TCP\",\"app_name\":\"NETBIOS\",\"honeypot\":\"Nepenthes\",\"desc\":\"Nepenthes NETBIOS 蜜罐服务, 通过NETBIOS协议使用空数据请求2103端口得到特征值: \\\\x82\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\",\"content\":\"import socket\\nfrom pocsuite3.api import Output, POCBase, register_poc\\n\\n\\nclass NepenthesNetbios(POCBase):\\n    vulID = '0008'\\n    author = ['jstang']\\n    name = 'Nepenthes NETBIOS 蜜罐服务'\\n    project = 'Nepenthes'\\n    appName = 'NETBIOS'\\n    appVersion = 'None'\\n    desc = \\\"Nepenthes NETBIOS 蜜罐服务, 通过NETBIOS协议使用空数据请求2103端口得到特征值: \\\\x82\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\"\\n\\n    def _attack(self):\\n        return self._verify()\\n\\n    def _verify(self):\\n        try:\\n            attr = self.target.split(':')\\n            if attr[1] != '2103':\\n                return self.parse_output({})\\n            # 1.创建套接字\\n            s = socket.socket()\\n            # 2.连接\\n            s.connect((attr[0], int(attr[1])))\\n            msg = s.recv(1024)\\n            print('From server: %!s(MISSING)' %!m(MISSING)sg)\\n            if r'\\\\x82\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00' in self.bytesToHexString(msg):\\n                return self.parse_output({'verify': self.bytesToHexString(msg)})\\n        except Exception as e:\\n            print(e)\\n\\n        return self.parse_output({})\\n\\n    def bytesToHexString(self, bs: bytes):\\n        # hex_str = ''\\n        # for item in bs:\\n        #     hex_str += str(hex(item))[2:].zfill(2).upper() + \\\" \\\"\\n        # return hex_str\\n        return ''.join(['\\\\\\\\x%!x(MISSING)' %!b(MISSING) for b in bs])\\n\\n    def parse_output(self, result):\\n        output = Output(self)\\n        if result:\\n            output.success(result)\\n        else:\\n            output.fail('The target looks safe!')\\n        return output\\n\\n\\nregister_poc(NepenthesNetbios)\\n\",\"create_at\":\"2021-02-01 11:57:49\",\"update_at\":\"2021-02-03 11:01:02\",\"is_delete\":0},{\"id\":9,\"trap_id\":\"0009\",\"name\":\"Conpot S7 蜜罐服务\",\"author\":\"jstang\",\"protocol\":\"TCP\",\"app_name\":\"S7\",\"honeypot\":\"Conpot\",\"desc\":\"Conpot S7 蜜罐服务, 通过S7协议使用空数据请求102端口得到特征值: Serial number of module: 88111222\",\"content\":\"import socket\\nfrom pocsuite3.api import Output, POCBase, register_poc\\n\\n\\nclass S7Conpot(POCBase):\\n    vulID = '0009'\\n    author = ['jstang']\\n    name = 'Conpot S7 蜜罐服务'\\n    project = 'Conpot'\\n    appName = 'S7'\\n    appVersion = 'None'\\n    desc = \\\"Conpot S7 蜜罐服务, 通过S7协议使用空数据请求102端口得到特征值: Serial number of module: 88111222\\\"\\n\\n    def _attack(self):\\n        return self._verify()\\n\\n    def _verify(self):\\n        try:\\n            attr = self.target.split(':')\\n            if attr[1] != '102':\\n                return self.parse_output({})\\n            # 1.创建套接字\\n            s = socket.socket()\\n            # 2.连接\\n            s.connect((attr[0], int(attr[1])))\\n            msg = s.recv(1024)\\n            print('From server: %!s(MISSING)' %!m(MISSING)sg)\\n            if 'Serial number of module:8811122' in str(msg):\\n                return self.parse_output({'verify': str(msg)})\\n        except Exception as e:\\n            print(e)\\n\\n        return self.parse_output({})\\n\\n    def parse_output(self, result):\\n        output = Output(self)\\n        if result:\\n            output.success(result)\\n        else:\\n            output.fail('The target looks safe!')\\n        return output\\n\\n\\nregister_poc(S7Conpot)\\n\",\"create_at\":\"2021-02-01 11:59:24\",\"update_at\":\"2021-02-03 11:00:57\",\"is_delete\":0},{\"id\":10,\"trap_id\":\"0010\",\"name\":\"Conpot Modbus 蜜罐服务\",\"author\":\"jstang\",\"protocol\":\"TCP\",\"app_name\":\"Modbus\",\"honeypot\":\"Conpot \",\"desc\":\"Conpot Modbus 蜜罐服务, 通过Modbus协议使用空数据请求502端口得到特征值: Device Identification: Siemems SIMATIC S7-200\",\"content\":\"import socket\\nfrom pocsuite3.api import Output, POCBase, register_poc\\n\\n\\nclass ConpotModbus(POCBase):\\n    vulID = '0010'\\n    author = ['jstang']\\n    name = 'Conpot Modbus 蜜罐服务'\\n    project = 'Conpot'\\n    appName = 'Modbus'\\n    appVersion = 'None'\\n    desc = \\\"Conpot Modbus 蜜罐服务, 通过Modbus协议使用空数据请求502端口得到特征值: Device Identification: Siemems SIMATIC S7-200\\\"\\n\\n    def _attack(self):\\n        return self._verify()\\n\\n    def _verify(self):\\n        try:\\n            attr = self.target.split(':')\\n            if attr[1] != '502':\\n                return self.parse_output({})\\n            # 1.创建套接字\\n            s = socket.socket()\\n            # 2.连接\\n            s.connect((attr[0], int(attr[1])))\\n            msg = s.recv(1024)\\n            print('From server: %!s(MISSING)' %!m(MISSING)sg)\\n            if 'Device Identification: Siemems SIMATIC S7-200' in str(msg):\\n                return self.parse_output({'verify': str(msg)})\\n        except Exception as e:\\n            print(e)\\n\\n        return self.parse_output({})\\n\\n    def parse_output(self, result):\\n        output = Output(self)\\n        if result:\\n            output.success(result)\\n        else:\\n            output.fail('The target looks safe!')\\n        return output\\n\\n\\nregister_poc(ConpotModbus)\\n\",\"create_at\":\"2021-02-01 11:59:51\",\"update_at\":\"2021-02-03 11:00:52\",\"is_delete\":0},{\"id\":11,\"trap_id\":\"0011\",\"name\":\"Dionaea Memcache 蜜罐服务\",\"author\":\"jstang\",\"protocol\":\"TCP\",\"app_name\":\"Memcache\",\"honeypot\":\"Dionaea\",\"desc\":\"Dionaea Memcached协议举例,在实现Memcached协议时Dionaea把很多参数做了随机化,但是在一些参数如: version,libevent和rusage_user等都是固定的.\",\"content\":\"# Dionaea 的Memcached协议举例，在实现Memcached协议时Dionaea在一些参数如：version、libevent和rusage_user等都是固定的。\\n# 仅需IP和端口\\nimport memcache\\nfrom pocsuite3.api import Output, POCBase, register_poc\\n\\n\\nclass MemcacheHoneypot(POCBase):\\n    vulID = '0011'  # ssvid\\n    author = ['jstang']\\n    name = \\\"Dionaea Memcache 蜜罐服务\\\"\\n    project = 'Dionaea'\\n    appName = 'Memcache'\\n    appVersion = 'None'\\n    desc = \\\"Dionaea Memcached协议举例,在实现Memcached协议时Dionaea把很多参数做了随机化,但是在一些参数如: version,libevent和rusage_user等都是固定的.\\\"\\n\\n    def _attack(self):\\n        print(\\\"\\u003e\\u003e\\u003e\\u003eexecute _attack\\\")\\n        return self._verify()\\n\\n    def _verify(self):\\n        try:\\n            attr = self.target.split(':')\\n            if attr[1] != '11211':\\n                return self.parse_output({})\\n\\n            array = []\\n            mc = memcache.Client([self.target])\\n            stats = mc.get_stats()\\n\\n            data = stats[0]\\n            data = data[1]\\n            if data['version'] == '1.6.9': \\n                array.append(\\\"Non randomized features: version=1.4.25\\\")\\n            if data['libevent'] == '2.0.22-stable':\\n                array.append(\\\"Non randomized features: libevent=2.0.22-stable\\\")\\n            if data['rusage_system'] == \\\"0.233\\\":\\n                array.append(\\\"Non randomized features: rusage_system=0.233\\\")\\n            if data['rusage_user'] == \\\"0.550000\\\":\\n                array.append(\\\"Non randomized features: rusage_user=0.550000\\\")\\n\\n            if not array:\\n                return self.parse_output({})\\n            return self.parse_output({'verify': ','.join(array)})\\n        except Exception as e:\\n            print(e)\\n            return self.parse_output({})\\n\\n    def parse_output(self, result):\\n        output = Output(self)\\n        if result:\\n            output.success(result)\\n        else:\\n            output.fail('target is not vulnerable')\\n        return output\\n\\n\\nregister_poc(MemcacheHoneypot)\\n\\n'''\\n[\\n    (\\n        '172.31.50.249:11211 (1)',\\n        {\\n            'pid': '1', 'uptime': '231', 'time': '1612091156', 'version': '1.6.9',\\n            'libevent': '2.1.8-stable', 'pointer_size': '64', 'rusage_user': '0.058336',\\n            'rusage_system': '0.019894', 'max_connections': '1024', 'curr_connections': '2',\\n            'total_connections': '7', 'rejected_connections': '0', 'connection_structures': '3',\\n            'response_obj_oom': '0', 'response_obj_count': '1', 'response_obj_bytes': '65536',\\n            'read_buf_count': '8', 'read_buf_bytes': '131072', 'read_buf_bytes_free': '49152',\\n            'read_buf_oom': '0', 'reserved_fds': '20', 'cmd_get': '0', 'cmd_set': '0',\\n            'cmd_flush': '0', 'cmd_touch': '0', 'cmd_meta': '0', 'get_hits': '0',\\n            'get_misses': '0', 'get_expired': '0', 'get_flushed': '0', 'delete_misses': '0',\\n            'delete_hits': '0', 'incr_misses': '0', 'incr_hits': '0', 'decr_misses': '0',\\n            'decr_hits': '0', 'cas_misses': '0', 'cas_hits': '0', 'cas_badval': '0',\\n            'touch_hits': '0', 'touch_misses': '0', 'auth_cmds': '0', 'auth_errors': '0',\\n            'bytes_read': '35', 'bytes_written': '8553', 'limit_maxbytes': '67108864',\\n            'accepting_conns': '1', 'listen_disabled_num': '0',\\n            'time_in_listen_disabled_us': '0', 'threads': '4', 'conn_yields': '0',\\n            'hash_power_level': '16', 'hash_bytes': '524288', 'hash_is_expanding': '0',\\n            'slab_reassign_rescues': '0', 'slab_reassign_chunk_rescues': '0',\\n            'slab_reassign_evictions_nomem': '0', 'slab_reassign_inline_reclaim': '0',\\n            'slab_reassign_busy_items': '0', 'slab_reassign_busy_deletes': '0',\\n            'slab_reassign_running': '0', 'slabs_moved': '0', 'lru_crawler_running': '0',\\n            'lru_crawler_starts': '3', 'lru_maintainer_juggles': '281', 'malloc_fails': '0',\\n            'log_worker_dropped': '0', 'log_worker_written': '0', 'log_watcher_skipped': '0',\\n            'log_watcher_sent': '0', 'unexpected_napi_ids': '0', 'round_robin_fallback': '0',\\n            'bytes': '0', 'curr_items': '0', 'total_items': '0', 'slab_global_page_pool': '0',\\n            'expired_unfetched': '0', 'evicted_unfetched': '0', 'evicted_active': '0',\\n            'evictions': '0', 'reclaimed': '0', 'crawler_reclaimed': '0',\\n            'crawler_items_checked': '0', 'lrutail_reflocked': '0', 'moves_to_cold': '0',\\n            'moves_to_warm': '0', 'moves_within_lru': '0', 'direct_reclaims': '0',\\n            'lru_bumps_dropped': '0'\\n        }\\n    )\\n]\\n'''\\n\",\"create_at\":\"2021-02-01 12:00:27\",\"update_at\":\"2021-02-03 11:10:39\",\"is_delete\":0},{\"id\":12,\"trap_id\":\"0012\",\"name\":\"Dionaea Sipd 蜜罐服务\",\"author\":\"jstang\",\"protocol\":\"TCP\",\"app_name\":\"Sipd\",\"honeypot\":\"Dionaea\",\"desc\":\"Dionaea Sipd 蜜罐服务, 通过Sipd协议使用空数据请求5060端口得到特征值: From:sip:nm@nm;tag=root\",\"content\":\"import socket\\nfrom pocsuite3.api import Output, POCBase, register_poc\\n\\n\\nclass DionaeaSipd(POCBase):\\n    vulID = '0012'\\n    author = ['jstang']\\n    name = 'Dionaea Sipd 蜜罐服务'\\n    project = 'Dionaea'\\n    appName = 'Sipd'\\n    appVersion = 'None'\\n    desc = \\\"Dionaea Sipd 蜜罐服务, 通过Sipd协议使用空数据请求5060端口得到特征值: From:sip:nm@nm;tag=root\\\"\\n\\n    def _attack(self):\\n        return self._verify()\\n\\n    def _verify(self):\\n        try:\\n            attr = self.target.split(':')\\n            if attr[1] != '5060':\\n                return self.parse_output({})\\n            # 1.创建套接字\\n            s = socket.socket()\\n            # 2.连接\\n            s.connect((attr[0], int(attr[1])))\\n            msg = s.recv(1024)\\n            print('From server: %!s(MISSING)' %!m(MISSING)sg)\\n            if 'From:sip:nm@nm;tag=root' in str(msg):\\n                return self.parse_output({'verify': str(msg)})\\n        except Exception as e:\\n            print(e)\\n\\n        return self.parse_output({})\\n\\n    def parse_output(self, result):\\n        output = Output(self)\\n        if result:\\n            output.success(result)\\n        else:\\n            output.fail('The target looks safe!')\\n        return output\\n\\n\\nregister_poc(DionaeaSipd)\\n\",\"create_at\":\"2021-02-01 12:01:05\",\"update_at\":\"2021-02-03 11:00:40\",\"is_delete\":0},{\"id\":13,\"trap_id\":\"0013\",\"name\":\"sshesame SSH 蜜罐服务\",\"author\":\"jstang\",\"protocol\":\"SSH\",\"app_name\":\"SSH\",\"honeypot\":\"sshesame\",\"desc\":\"sshesame SSH 蜜罐服务, 通过SSH协议使用空数据请求2022端口得到特征值: SSH-2.0-sshesame\",\"content\":\"import socket\\nfrom pocsuite3.api import Output, POCBase, register_poc\\n\\n\\nclass SSHesame(POCBase):\\n    vulID = '0013'\\n    author = ['jstang']\\n    name = 'sshesame SSH 蜜罐服务'\\n    project = 'sshesame'\\n    appName = 'SSH'\\n    appVersion = 'None'\\n    desc = \\\"sshesame SSH 蜜罐服务, 通过SSH协议使用空数据请求2022端口得到特征值: SSH-2.0-sshesame\\\"\\n\\n    def _attack(self):\\n        return self._verify()\\n\\n    def _verify(self):\\n        try:\\n            attr = self.target.split(':')\\n            if attr[1] != '2022':\\n                return self.parse_output({})\\n            # 1.创建套接字\\n            s = socket.socket()\\n            # 2.连接\\n            s.connect((attr[0], int(attr[1])))\\n            msg = s.recv(1024)\\n            print('From server: %!s(MISSING)' %!m(MISSING)sg)\\n            if 'SSH-2.0-sshesame' in str(msg):\\n                return self.parse_output({'verify': str(msg)})\\n        except Exception as e:\\n            print(e)\\n\\n        return self.parse_output({})\\n\\n    def parse_output(self, result):\\n        output = Output(self)\\n        if result:\\n            output.success(result)\\n        else:\\n            output.fail('The target looks safe!')\\n        return output\\n\\n\\nregister_poc(SSHesame)\\n\",\"create_at\":\"2021-02-01 12:01:36\",\"update_at\":\"2021-02-03 11:00:30\",\"is_delete\":0}]},\"trace_id\":\"ac1f32f9601e4f6ed40624fc2d6c92b0\",\"stack\":null}
[INFO][2021-02-06T16:16:20.365][log.go:58] _com_request_in||spanid=cc0162ad015ef1a1||method=GET||args=map[]||traceid=ac1f32f9601e50548b9224fcc006ebb0||cspanid=||uri=/trap/plugin/list?page=1&limit=20&info=||body=||from=172.31.50.45
[INFO][2021-02-06T16:16:20.365][log.go:58] _com_mysql_success||proc_time=0.002753s||traceid=ac1f32f9601e50548b9224fcc006ebb0||cspanid=||spanid=cc0162ad015ef1a1||level=sql||current_time=2021-02-06 16:16:20||affected_row=13||source=/root/go/src/github.com/wh1t3zer/Hawkeye-Go/dao/trap_plugin.go:67||sql=SELECT * FROM `trap_plugin`   ORDER BY id asc LIMIT 20 OFFSET 0
[INFO][2021-02-06T16:16:20.365][log.go:58] _com_mysql_success||level=sql||sql=SELECT count(*) FROM `trap_plugin`  ||traceid=ac1f32f9601e50548b9224fcc006ebb0||cspanid=||spanid=cc0162ad015ef1a1||source=/root/go/src/github.com/wh1t3zer/Hawkeye-Go/dao/trap_plugin.go:71||current_time=2021-02-06 16:16:20||proc_time=0.000426s||affected_row=0
[INFO][2021-02-06T16:16:20.365][log.go:58] _com_request_out||traceid=ac1f32f9601e50548b9224fcc006ebb0||spanid=cc0162ad015ef1a1||from=172.31.50.45||response={\"errno\":0,\"errmsg\":\"\",\"data\":{\"total\":13,\"list\":[{\"id\":1,\"trap_id\":\"0001\",\"name\":\"whoisscanme TCP 蜜罐服务\",\"author\":\"jstang\",\"protocol\":\"TCP\",\"app_name\":\"TCP App\",\"honeypot\":\"whoisscanme\",\"desc\":\"whoisscanme TCP 蜜罐服务, 通过TCP使用空数据请求任意端口得到特征值: whoisscanme:https://github.com/bg6cq/whoisscanme\",\"content\":\"import socket\\nfrom pocsuite3.api import Output, POCBase, register_poc\\n\\n\\nclass WhoisScanMe(POCBase):\\n    vulID = '0001'\\n    author = ['jstang']\\n    name = 'whoisscanme TCP 蜜罐服务'\\n    project = 'whoisscanme'\\n    appName = 'TCP App'\\n    appVersion = 'None'\\n    desc = \\\"whoisscanme TCP 蜜罐服务, 通过TCP使用空数据请求任意端口得到特征值: whoisscanme:https://github.com/bg6cq/whoisscanme\\\"\\n\\n    def _attack(self):\\n        print(\\\"\\u003e\\u003e\\u003e\\u003eexecute _attack\\\")\\n        return self._verify()\\n\\n    def _verify(self):\\n        try:\\n            attr = self.target.split(':')\\n            # 1.创建套接字\\n            s = socket.socket()\\n            # 2.连接\\n            s.connect((attr[0], int(attr[1])))\\n            # 3.请求\\n            s.send(b'')  # TCP是面向字节流的协议,在进行TCP通信时都需要转成字节流才可以使用TCP协议进行传输。\\n            msg = s.recv(1024)\\n            print('From server: %!s(MISSING)' %!m(MISSING)sg)\\n            if 'whoisscanme' in str(msg):\\n                return self.parse_output({'verify': str(msg)})\\n        except Exception as e:\\n            print(e)\\n\\n        return self.parse_output({})\\n\\n    def parse_output(self, result):\\n        output = Output(self)\\n        if result:\\n            output.success(result)\\n        else:\\n            output.fail('The target looks safe!')\\n        return output\\n\\n\\nregister_poc(WhoisScanMe)\\n\",\"create_at\":\"1971-01-01 00:00:00\",\"update_at\":\"2021-02-03 11:01:41\",\"is_delete\":0},{\"id\":2,\"trap_id\":\"0002\",\"name\":\"Cowrie Telnet 蜜罐服务\",\"author\":\"jstang\",\"protocol\":\"TCP\",\"app_name\":\"Telnet\",\"honeypot\":\"Cowrie\",\"desc\":\"Cowrie Telnet 蜜罐服务, 通过TCP使用空数据请求23/2323端口得到特征值: \\\\\\\\xff\\\\\\\\xfd\\\\\\\\x1flogin:\",\"content\":\"# Dionaea 的Memcached协议举例，在实现Memcached协议时Dionaea在一些参数如：version、libevent和rusage_user等都是固定的。\\n# 仅需IP和端口\\nimport socket\\nfrom pocsuite3.api import Output, POCBase, register_poc\\n\\n\\nclass Cowrie(POCBase):\\n    vulID = '0002'\\n    author = ['jstang']\\n    name = \\\"Cowrie Telnet 蜜罐服务\\\"\\n    project = 'Cowrie'\\n    appName = 'Telnet'\\n    appVersion = 'None'\\n    desc = \\\"Cowrie Telnet 蜜罐服务, 通过TCP使用空数据请求23/2323端口得到特征值: \\\\\\\\xff\\\\\\\\xfd\\\\\\\\x1flogin:\\\"\\n\\n    def _attack(self):\\n        return self._verify()\\n\\n    def _verify(self):\\n        try:\\n            attr = self.target.split(':')\\n            # 0.必须是23/2323端口\\n            if attr[1] != str(23) and attr[1] != str(2323):\\n                return self.parse_output({})\\n\\n            # 1.创建套接字\\n            s = socket.socket()\\n            # 2.连接\\n            s.connect((attr[0], int(attr[1])))\\n            # 3.校验特征\\n            msg = s.recv(1024)\\n            print('From server: %!s(MISSING)' %!m(MISSING)sg)\\n            if '\\\\\\\\xff\\\\\\\\xfd\\\\\\\\x1flogin:' in str(msg):\\n                return self.parse_output({'verify': str(msg)})\\n        except Exception as e:\\n            print(e)\\n\\n        return self.parse_output({})\\n\\n    def parse_output(self, result):\\n        output = Output(self)\\n        if result:\\n            output.success(result)\\n        else:\\n            output.fail('The target looks safe!')\\n        return output\\n\\n\\nregister_poc(Cowrie)\\n\",\"create_at\":\"2021-02-01 11:49:27\",\"update_at\":\"2021-02-03 11:01:36\",\"is_delete\":0},{\"id\":3,\"trap_id\":\"0003\",\"name\":\"Amun IMAP 蜜罐服务\",\"author\":\"jstang\",\"protocol\":\"IMAP\",\"app_name\":\"IMAP\",\"honeypot\":\"Amun\",\"desc\":\"Amun IMAP 蜜罐服务, 通过imap协议使用数据(\\\\\\\\r\\\\\\\\n\\\\\\\\r\\\\\\\\n)请求143端口得到特征值: a001 OK LOGIN completed\",\"content\":\"# Dionaea 的Memcached协议举例，在实现Memcached协议时Dionaea在一些参数如：version、libevent和rusage_user等都是固定的。\\n# 仅需IP和端口\\nimport socket\\nfrom pocsuite3.api import Output, POCBase, register_poc\\n\\n\\nclass Amun(POCBase):\\n    vulID = '0003'\\n    author = ['jstang']\\n    name = \\\"Amun IMAP 蜜罐服务\\\"\\n    project = 'Amun'\\n    appName = 'IMAP'\\n    appVersion = 'None'\\n    desc = \\\"Amun IMAP 蜜罐服务, 通过imap协议使用数据(\\\\\\\\r\\\\\\\\n\\\\\\\\r\\\\\\\\n)请求143端口得到特征值: a001 OK LOGIN completed\\\"\\n\\n    def _attack(self):\\n        return self._verify()\\n\\n    def _verify(self):\\n        try:\\n            attr = self.target.split(':')\\n            if attr[1] != str(143):\\n                return self.parse_output({})\\n            # 1.创建套接字\\n            s = socket.socket()\\n            # 2.连接\\n            s.connect((attr[0], int(attr[1])))\\n            # 3.请求\\n            s.send(b'\\\\r\\\\n\\\\r\\\\n')  # TCP是面向字节流的协议,在进行TCP通信时都需要转成字节流才可以使用TCP协议进行传输。\\n            msg = s.recv(1024)\\n            print('From server: %!s(MISSING)' %!m(MISSING)sg)\\n            if 'a001' in str(msg) and 'OK' in str(msg) and 'LOGIN' in str(msg) and 'completed' in str(msg):\\n                return self.parse_output({'verify': str(msg)})\\n        except Exception as e:\\n            print(e)\\n\\n        return self.parse_output({})\\n\\n    def parse_output(self, result):\\n        output = Output(self)\\n        if result:\\n            output.success(result)\\n        else:\\n            output.fail('The target looks safe!')\\n        return output\\n\\n\\nregister_poc(Amun)\\n\",\"create_at\":\"2021-02-01 11:52:58\",\"update_at\":\"2021-02-03 11:01:30\",\"is_delete\":0},{\"id\":4,\"trap_id\":\"0004\",\"name\":\"Dionaea FTP 蜜罐服务\",\"author\":\"jstang\",\"protocol\":\"FTP\",\"app_name\":\"FTP\",\"honeypot\":\"Dionaea\",\"desc\":\"Dionaea FTP 蜜罐服务, 通过FTP协议使用空数据请求21端口得到特征值: 220 Welcome to the ftp service \\\\r\\\\n\",\"content\":\"import socket\\nfrom pocsuite3.api import Output, POCBase, register_poc\\n\\n\\nclass DionaeaFtp(POCBase):\\n    vulID = '0004'\\n    author = ['jstang']\\n    name = 'Dionaea FTP 蜜罐服务'\\n    project = 'Dionaea'\\n    appName = 'FTP'\\n    appVersion = 'None'\\n    desc = \\\"Dionaea FTP 蜜罐服务, 通过FTP协议使用空数据请求21端口得到特征值: 220 Welcome to the ftp service \\\\r\\\\n\\\"\\n\\n    def _attack(self):\\n        return self._verify()\\n\\n    def _verify(self):\\n        try:\\n            attr = self.target.split(':')\\n            if attr[1] != '21':\\n                return self.parse_output({})\\n            # 1.创建套接字\\n            s = socket.socket()\\n            # 2.连接\\n            s.connect((attr[0], int(attr[1])))\\n            # 3.请求\\n            s.send(b'\\\\\\\\r\\\\\\\\n\\\\\\\\r\\\\\\\\n')  # TCP是面向字节流的协议,在进行TCP通信时都需要转成字节流才可以使用TCP协议进行传输。\\n            msg = s.recv(1024)\\n            print('From server: %!s(MISSING)' %!m(MISSING)sg)\\n            if '220 Welcome to the ftp service' in str(msg):\\n                return self.parse_output({'verify': str(msg)})\\n        except Exception as e:\\n            print(e)\\n\\n        return self.parse_output({})\\n\\n    def parse_output(self, result):\\n        output = Output(self)\\n        if result:\\n            output.success(result)\\n        else:\\n            output.fail('The target looks safe!')\\n        return output\\n\\n\\nregister_poc(DionaeaFtp)\\n\",\"create_at\":\"2021-02-01 11:54:03\",\"update_at\":\"2021-02-03 11:01:24\",\"is_delete\":0},{\"id\":5,\"trap_id\":\"0005\",\"name\":\"Dionaea MSSQL 蜜罐服务\",\"author\":\"jstang\",\"protocol\":\"TCP\",\"app_name\":\"MSSQL\",\"honeypot\":\"Dionaea\",\"desc\":\"Dionaea MSSQL 蜜罐服务, 通过MSSQL协议使用空数据请求1443端口得到特征值: \\\\x04\\\\x01\\\\x00\\\\x2b\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x1a\\\\x00\\\\x06\\\\x01\\\\x00\\\\x20\\\\x00\\\\x01\\\\x02\\\\x00\\\\x21\\\\x00\\\\x01\\\\x03\\\\x00\\\\x22\\\\x00\\\\x00\\\\x04\\\\x00\\\\x22\\\\x00\\\\x01\\\\xff\\\\x08\\\\x00\\\\x02\\\\x10\\\\x00\\\\x00\\\\x02\\\\x00\\\\x00\",\"content\":\"import socket\\nfrom pocsuite3.api import Output, POCBase, register_poc\\n\\n\\nclass DionaeaMssql(POCBase):\\n    vulID = '0005'\\n    author = ['jstang']\\n    name = 'Dionaea MSSQL 蜜罐服务'\\n    project = 'Dionaea'\\n    appName = 'MSSQL'\\n    appVersion = 'None'\\n    desc = r\\\"Dionaea MSSQL 蜜罐服务, 通过MSSQL协议使用空数据请求1443端口得到特征值: \\\\x04\\\\x01\\\\x00\\\\x2b\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x1a\\\\x00\\\\x06\\\\x01\\\\x00\\\\x20\\\\x00\\\\x01\\\\x02\\\\x00\\\\x21\\\\x00\\\\x01\\\\x03\\\\x00\\\\x22\\\\x00\\\\x00\\\\x04\\\\x00\\\\x22\\\\x00\\\\x01\\\\xff\\\\x08\\\\x00\\\\x02\\\\x10\\\\x00\\\\x00\\\\x02\\\\x00\\\\x00\\\"\\n\\n    def _attack(self):\\n        return self._verify()\\n\\n    def _verify(self):\\n        try:\\n            attr = self.target.split(':')\\n            if attr[1] != '1443':\\n                return self.parse_output({})\\n            # 1.创建套接字\\n            s = socket.socket()\\n            # 2.连接\\n            s.connect((attr[0], int(attr[1])))\\n            # 3.请求\\n            s.send(b'\\\\\\\\r\\\\\\\\n\\\\\\\\r\\\\\\\\n')\\n            msg = s.recv(1024)\\n            print('From server: %!s(MISSING)' %!m(MISSING)sg)\\n            if r'\\\\x04\\\\x01\\\\x00\\\\x2b\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x1a\\\\x00\\\\x06\\\\x01\\\\x00\\\\x20\\\\x00\\\\x01\\\\x02\\\\x00\\\\x21\\\\x00\\\\x01\\\\x03\\\\x00\\\\x22\\\\x00\\\\x00\\\\x04\\\\x00\\\\x22\\\\x00\\\\x01\\\\xff\\\\x08\\\\x00\\\\x02\\\\x10\\\\x00\\\\x00\\\\x02\\\\x00\\\\x00' in self.bytesToHexString(msg):\\n                return self.parse_output({'verify': self.bytesToHexString(msg)})\\n        except Exception as e:\\n            print(e)\\n\\n        return self.parse_output({})\\n\\n    def bytesToHexString(self, bs: bytes):\\n        # hex_str = ''\\n        # for item in bs:\\n        #     hex_str += str(hex(item))[2:].zfill(2).upper() + \\\" \\\"\\n        # return hex_str\\n        return ''.join(['\\\\\\\\x%!x(MISSING)' %!b(MISSING) for b in bs])\\n\\n    def parse_output(self, result):\\n        output = Output(self)\\n        if result:\\n            output.success(result)\\n        else:\\n            output.fail('The target looks safe!')\\n        return output\\n\\n\\nregister_poc(DionaeaMssql)\\n\",\"create_at\":\"2021-02-01 11:55:07\",\"update_at\":\"2021-02-03 11:01:19\",\"is_delete\":0},{\"id\":6,\"trap_id\":\"0006\",\"name\":\"Kojoney SSH 蜜罐服务\",\"author\":\"jstang\",\"protocol\":\"SSH\",\"app_name\":\"SSH\",\"honeypot\":\"Kojoney\",\"desc\":\"Kojoney SSH 蜜罐服务, 通过imap协议使用空数据请求22/2222端口得到特征值: SSH-2.0-Twisted\\\\\\\\r\\\\\\\\n\",\"content\":\"import socket\\nfrom pocsuite3.api import Output, POCBase, register_poc\\n\\n\\nclass KojoneySSH(POCBase):\\n    vulID = '0006'\\n    author = ['jstang']\\n    name = 'Kojoney SSH 蜜罐服务'\\n    project = 'Kojoney'\\n    appName = 'SSH'\\n    appVersion = 'None'\\n    desc = \\\"Kojoney SSH 蜜罐服务, 通过imap协议使用空数据请求22/2222端口得到特征值: SSH-2.0-Twisted\\\\\\\\r\\\\\\\\n\\\"\\n\\n    def _attack(self):\\n        return self._verify()\\n\\n    def _verify(self):\\n        try:\\n            attr = self.target.split(':')\\n            if attr[1] != '22' and attr[1] != '2222':\\n                return self.parse_output({})\\n            # 1.创建套接字\\n            s = socket.socket()\\n            # 2.连接\\n            s.connect((attr[0], int(attr[1])))\\n            msg = s.recv(1024)\\n            print('From server: %!s(MISSING)' %!m(MISSING)sg)\\n            if 'SSH-2.0-Twisted' in str(msg):\\n                return self.parse_output({'verify': str(msg)})\\n        except Exception as e:\\n            print(e)\\n\\n        return self.parse_output({})\\n\\n    def parse_output(self, result):\\n        output = Output(self)\\n        if result:\\n            output.success(result)\\n        else:\\n            output.fail('The target looks safe!')\\n        return output\\n\\n\\nregister_poc(KojoneySSH)\\n\",\"create_at\":\"2021-02-01 11:55:51\",\"update_at\":\"2021-02-03 11:01:13\",\"is_delete\":0},{\"id\":7,\"trap_id\":\"0007\",\"name\":\"Nepenthes FTP 蜜罐服务\",\"author\":\"jstang\",\"protocol\":\"FTP\",\"app_name\":\"FTP\",\"honeypot\":\"Nepenthes\",\"desc\":\"Nepenthes FTP 蜜罐服务, 通过FTP协议使用空数据请求21端口得到特征值: ---freeFTPd 1.0---warFTPd 1.65---\\\\r\\\\n\",\"content\":\"import socket\\nfrom pocsuite3.api import Output, POCBase, register_poc\\n\\n\\nclass NepenthesFTP(POCBase):\\n    vulID = '0007'\\n    author = ['jstang']\\n    name = 'Nepenthes FTP 蜜罐服务'\\n    project = 'Nepenthes'\\n    appName = 'FTP'\\n    appVersion = 'None'\\n    desc = \\\"Nepenthes FTP 蜜罐服务, 通过FTP协议使用空数据请求21端口得到特征值: ---freeFTPd 1.0---warFTPd 1.65---\\\\r\\\\n\\\"\\n\\n    def _attack(self):\\n        return self._verify()\\n\\n    def _verify(self):\\n        try:\\n            attr = self.target.split(':')\\n            if attr[1] != '21':\\n                return self.parse_output({})\\n            # 1.创建套接字\\n            s = socket.socket()\\n            # 2.连接\\n            s.connect((attr[0], int(attr[1])))\\n            msg = s.recv(1024)\\n            print('From server: %!s(MISSING)' %!m(MISSING)sg)\\n            if '---freeFTPd 1.0---warFTPd 1.65---' in str(msg):\\n                return self.parse_output({'verify': str(msg)})\\n        except Exception as e:\\n            print(e)\\n\\n        return self.parse_output({})\\n\\n    def parse_output(self, result):\\n        output = Output(self)\\n        if result:\\n            output.success(result)\\n        else:\\n            output.fail('The target looks safe!')\\n        return output\\n\\n\\nregister_poc(NepenthesFTP)\\n\",\"create_at\":\"2021-02-01 11:56:41\",\"update_at\":\"2021-02-03 11:01:08\",\"is_delete\":0},{\"id\":8,\"trap_id\":\"0008\",\"name\":\"Nepenthes NETBIOS 蜜罐服务\",\"author\":\"jstang\",\"protocol\":\"TCP\",\"app_name\":\"NETBIOS\",\"honeypot\":\"Nepenthes\",\"desc\":\"Nepenthes NETBIOS 蜜罐服务, 通过NETBIOS协议使用空数据请求2103端口得到特征值: \\\\x82\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\",\"content\":\"import socket\\nfrom pocsuite3.api import Output, POCBase, register_poc\\n\\n\\nclass NepenthesNetbios(POCBase):\\n    vulID = '0008'\\n    author = ['jstang']\\n    name = 'Nepenthes NETBIOS 蜜罐服务'\\n    project = 'Nepenthes'\\n    appName = 'NETBIOS'\\n    appVersion = 'None'\\n    desc = \\\"Nepenthes NETBIOS 蜜罐服务, 通过NETBIOS协议使用空数据请求2103端口得到特征值: \\\\x82\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\"\\n\\n    def _attack(self):\\n        return self._verify()\\n\\n    def _verify(self):\\n        try:\\n            attr = self.target.split(':')\\n            if attr[1] != '2103':\\n                return self.parse_output({})\\n            # 1.创建套接字\\n            s = socket.socket()\\n            # 2.连接\\n            s.connect((attr[0], int(attr[1])))\\n            msg = s.recv(1024)\\n            print('From server: %!s(MISSING)' %!m(MISSING)sg)\\n            if r'\\\\x82\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00' in self.bytesToHexString(msg):\\n                return self.parse_output({'verify': self.bytesToHexString(msg)})\\n        except Exception as e:\\n            print(e)\\n\\n        return self.parse_output({})\\n\\n    def bytesToHexString(self, bs: bytes):\\n        # hex_str = ''\\n        # for item in bs:\\n        #     hex_str += str(hex(item))[2:].zfill(2).upper() + \\\" \\\"\\n        # return hex_str\\n        return ''.join(['\\\\\\\\x%!x(MISSING)' %!b(MISSING) for b in bs])\\n\\n    def parse_output(self, result):\\n        output = Output(self)\\n        if result:\\n            output.success(result)\\n        else:\\n            output.fail('The target looks safe!')\\n        return output\\n\\n\\nregister_poc(NepenthesNetbios)\\n\",\"create_at\":\"2021-02-01 11:57:49\",\"update_at\":\"2021-02-03 11:01:02\",\"is_delete\":0},{\"id\":9,\"trap_id\":\"0009\",\"name\":\"Conpot S7 蜜罐服务\",\"author\":\"jstang\",\"protocol\":\"TCP\",\"app_name\":\"S7\",\"honeypot\":\"Conpot\",\"desc\":\"Conpot S7 蜜罐服务, 通过S7协议使用空数据请求102端口得到特征值: Serial number of module: 88111222\",\"content\":\"import socket\\nfrom pocsuite3.api import Output, POCBase, register_poc\\n\\n\\nclass S7Conpot(POCBase):\\n    vulID = '0009'\\n    author = ['jstang']\\n    name = 'Conpot S7 蜜罐服务'\\n    project = 'Conpot'\\n    appName = 'S7'\\n    appVersion = 'None'\\n    desc = \\\"Conpot S7 蜜罐服务, 通过S7协议使用空数据请求102端口得到特征值: Serial number of module: 88111222\\\"\\n\\n    def _attack(self):\\n        return self._verify()\\n\\n    def _verify(self):\\n        try:\\n            attr = self.target.split(':')\\n            if attr[1] != '102':\\n                return self.parse_output({})\\n            # 1.创建套接字\\n            s = socket.socket()\\n            # 2.连接\\n            s.connect((attr[0], int(attr[1])))\\n            msg = s.recv(1024)\\n            print('From server: %!s(MISSING)' %!m(MISSING)sg)\\n            if 'Serial number of module:8811122' in str(msg):\\n                return self.parse_output({'verify': str(msg)})\\n        except Exception as e:\\n            print(e)\\n\\n        return self.parse_output({})\\n\\n    def parse_output(self, result):\\n        output = Output(self)\\n        if result:\\n            output.success(result)\\n        else:\\n            output.fail('The target looks safe!')\\n        return output\\n\\n\\nregister_poc(S7Conpot)\\n\",\"create_at\":\"2021-02-01 11:59:24\",\"update_at\":\"2021-02-03 11:00:57\",\"is_delete\":0},{\"id\":10,\"trap_id\":\"0010\",\"name\":\"Conpot Modbus 蜜罐服务\",\"author\":\"jstang\",\"protocol\":\"TCP\",\"app_name\":\"Modbus\",\"honeypot\":\"Conpot \",\"desc\":\"Conpot Modbus 蜜罐服务, 通过Modbus协议使用空数据请求502端口得到特征值: Device Identification: Siemems SIMATIC S7-200\",\"content\":\"import socket\\nfrom pocsuite3.api import Output, POCBase, register_poc\\n\\n\\nclass ConpotModbus(POCBase):\\n    vulID = '0010'\\n    author = ['jstang']\\n    name = 'Conpot Modbus 蜜罐服务'\\n    project = 'Conpot'\\n    appName = 'Modbus'\\n    appVersion = 'None'\\n    desc = \\\"Conpot Modbus 蜜罐服务, 通过Modbus协议使用空数据请求502端口得到特征值: Device Identification: Siemems SIMATIC S7-200\\\"\\n\\n    def _attack(self):\\n        return self._verify()\\n\\n    def _verify(self):\\n        try:\\n            attr = self.target.split(':')\\n            if attr[1] != '502':\\n                return self.parse_output({})\\n            # 1.创建套接字\\n            s = socket.socket()\\n            # 2.连接\\n            s.connect((attr[0], int(attr[1])))\\n            msg = s.recv(1024)\\n            print('From server: %!s(MISSING)' %!m(MISSING)sg)\\n            if 'Device Identification: Siemems SIMATIC S7-200' in str(msg):\\n                return self.parse_output({'verify': str(msg)})\\n        except Exception as e:\\n            print(e)\\n\\n        return self.parse_output({})\\n\\n    def parse_output(self, result):\\n        output = Output(self)\\n        if result:\\n            output.success(result)\\n        else:\\n            output.fail('The target looks safe!')\\n        return output\\n\\n\\nregister_poc(ConpotModbus)\\n\",\"create_at\":\"2021-02-01 11:59:51\",\"update_at\":\"2021-02-03 11:00:52\",\"is_delete\":0},{\"id\":11,\"trap_id\":\"0011\",\"name\":\"Dionaea Memcache 蜜罐服务\",\"author\":\"jstang\",\"protocol\":\"TCP\",\"app_name\":\"Memcache\",\"honeypot\":\"Dionaea\",\"desc\":\"Dionaea Memcached协议举例,在实现Memcached协议时Dionaea把很多参数做了随机化,但是在一些参数如: version,libevent和rusage_user等都是固定的.\",\"content\":\"# Dionaea 的Memcached协议举例，在实现Memcached协议时Dionaea在一些参数如：version、libevent和rusage_user等都是固定的。\\n# 仅需IP和端口\\nimport memcache\\nfrom pocsuite3.api import Output, POCBase, register_poc\\n\\n\\nclass MemcacheHoneypot(POCBase):\\n    vulID = '0011'  # ssvid\\n    author = ['jstang']\\n    name = \\\"Dionaea Memcache 蜜罐服务\\\"\\n    project = 'Dionaea'\\n    appName = 'Memcache'\\n    appVersion = 'None'\\n    desc = \\\"Dionaea Memcached协议举例,在实现Memcached协议时Dionaea把很多参数做了随机化,但是在一些参数如: version,libevent和rusage_user等都是固定的.\\\"\\n\\n    def _attack(self):\\n        print(\\\"\\u003e\\u003e\\u003e\\u003eexecute _attack\\\")\\n        return self._verify()\\n\\n    def _verify(self):\\n        try:\\n            attr = self.target.split(':')\\n            if attr[1] != '11211':\\n                return self.parse_output({})\\n\\n            array = []\\n            mc = memcache.Client([self.target])\\n            stats = mc.get_stats()\\n\\n            data = stats[0]\\n            data = data[1]\\n            if data['version'] == '1.6.9': \\n                array.append(\\\"Non randomized features: version=1.4.25\\\")\\n            if data['libevent'] == '2.0.22-stable':\\n                array.append(\\\"Non randomized features: libevent=2.0.22-stable\\\")\\n            if data['rusage_system'] == \\\"0.233\\\":\\n                array.append(\\\"Non randomized features: rusage_system=0.233\\\")\\n            if data['rusage_user'] == \\\"0.550000\\\":\\n                array.append(\\\"Non randomized features: rusage_user=0.550000\\\")\\n\\n            if not array:\\n                return self.parse_output({})\\n            return self.parse_output({'verify': ','.join(array)})\\n        except Exception as e:\\n            print(e)\\n            return self.parse_output({})\\n\\n    def parse_output(self, result):\\n        output = Output(self)\\n        if result:\\n            output.success(result)\\n        else:\\n            output.fail('target is not vulnerable')\\n        return output\\n\\n\\nregister_poc(MemcacheHoneypot)\\n\\n'''\\n[\\n    (\\n        '172.31.50.249:11211 (1)',\\n        {\\n            'pid': '1', 'uptime': '231', 'time': '1612091156', 'version': '1.6.9',\\n            'libevent': '2.1.8-stable', 'pointer_size': '64', 'rusage_user': '0.058336',\\n            'rusage_system': '0.019894', 'max_connections': '1024', 'curr_connections': '2',\\n            'total_connections': '7', 'rejected_connections': '0', 'connection_structures': '3',\\n            'response_obj_oom': '0', 'response_obj_count': '1', 'response_obj_bytes': '65536',\\n            'read_buf_count': '8', 'read_buf_bytes': '131072', 'read_buf_bytes_free': '49152',\\n            'read_buf_oom': '0', 'reserved_fds': '20', 'cmd_get': '0', 'cmd_set': '0',\\n            'cmd_flush': '0', 'cmd_touch': '0', 'cmd_meta': '0', 'get_hits': '0',\\n            'get_misses': '0', 'get_expired': '0', 'get_flushed': '0', 'delete_misses': '0',\\n            'delete_hits': '0', 'incr_misses': '0', 'incr_hits': '0', 'decr_misses': '0',\\n            'decr_hits': '0', 'cas_misses': '0', 'cas_hits': '0', 'cas_badval': '0',\\n            'touch_hits': '0', 'touch_misses': '0', 'auth_cmds': '0', 'auth_errors': '0',\\n            'bytes_read': '35', 'bytes_written': '8553', 'limit_maxbytes': '67108864',\\n            'accepting_conns': '1', 'listen_disabled_num': '0',\\n            'time_in_listen_disabled_us': '0', 'threads': '4', 'conn_yields': '0',\\n            'hash_power_level': '16', 'hash_bytes': '524288', 'hash_is_expanding': '0',\\n            'slab_reassign_rescues': '0', 'slab_reassign_chunk_rescues': '0',\\n            'slab_reassign_evictions_nomem': '0', 'slab_reassign_inline_reclaim': '0',\\n            'slab_reassign_busy_items': '0', 'slab_reassign_busy_deletes': '0',\\n            'slab_reassign_running': '0', 'slabs_moved': '0', 'lru_crawler_running': '0',\\n            'lru_crawler_starts': '3', 'lru_maintainer_juggles': '281', 'malloc_fails': '0',\\n            'log_worker_dropped': '0', 'log_worker_written': '0', 'log_watcher_skipped': '0',\\n            'log_watcher_sent': '0', 'unexpected_napi_ids': '0', 'round_robin_fallback': '0',\\n            'bytes': '0', 'curr_items': '0', 'total_items': '0', 'slab_global_page_pool': '0',\\n            'expired_unfetched': '0', 'evicted_unfetched': '0', 'evicted_active': '0',\\n            'evictions': '0', 'reclaimed': '0', 'crawler_reclaimed': '0',\\n            'crawler_items_checked': '0', 'lrutail_reflocked': '0', 'moves_to_cold': '0',\\n            'moves_to_warm': '0', 'moves_within_lru': '0', 'direct_reclaims': '0',\\n            'lru_bumps_dropped': '0'\\n        }\\n    )\\n]\\n'''\\n\",\"create_at\":\"2021-02-01 12:00:27\",\"update_at\":\"2021-02-03 11:10:39\",\"is_delete\":0},{\"id\":12,\"trap_id\":\"0012\",\"name\":\"Dionaea Sipd 蜜罐服务\",\"author\":\"jstang\",\"protocol\":\"TCP\",\"app_name\":\"Sipd\",\"honeypot\":\"Dionaea\",\"desc\":\"Dionaea Sipd 蜜罐服务, 通过Sipd协议使用空数据请求5060端口得到特征值: From:sip:nm@nm;tag=root\",\"content\":\"import socket\\nfrom pocsuite3.api import Output, POCBase, register_poc\\n\\n\\nclass DionaeaSipd(POCBase):\\n    vulID = '0012'\\n    author = ['jstang']\\n    name = 'Dionaea Sipd 蜜罐服务'\\n    project = 'Dionaea'\\n    appName = 'Sipd'\\n    appVersion = 'None'\\n    desc = \\\"Dionaea Sipd 蜜罐服务, 通过Sipd协议使用空数据请求5060端口得到特征值: From:sip:nm@nm;tag=root\\\"\\n\\n    def _attack(self):\\n        return self._verify()\\n\\n    def _verify(self):\\n        try:\\n            attr = self.target.split(':')\\n            if attr[1] != '5060':\\n                return self.parse_output({})\\n            # 1.创建套接字\\n            s = socket.socket()\\n            # 2.连接\\n            s.connect((attr[0], int(attr[1])))\\n            msg = s.recv(1024)\\n            print('From server: %!s(MISSING)' %!m(MISSING)sg)\\n            if 'From:sip:nm@nm;tag=root' in str(msg):\\n                return self.parse_output({'verify': str(msg)})\\n        except Exception as e:\\n            print(e)\\n\\n        return self.parse_output({})\\n\\n    def parse_output(self, result):\\n        output = Output(self)\\n        if result:\\n            output.success(result)\\n        else:\\n            output.fail('The target looks safe!')\\n        return output\\n\\n\\nregister_poc(DionaeaSipd)\\n\",\"create_at\":\"2021-02-01 12:01:05\",\"update_at\":\"2021-02-03 11:00:40\",\"is_delete\":0},{\"id\":13,\"trap_id\":\"0013\",\"name\":\"sshesame SSH 蜜罐服务\",\"author\":\"jstang\",\"protocol\":\"SSH\",\"app_name\":\"SSH\",\"honeypot\":\"sshesame\",\"desc\":\"sshesame SSH 蜜罐服务, 通过SSH协议使用空数据请求2022端口得到特征值: SSH-2.0-sshesame\",\"content\":\"import socket\\nfrom pocsuite3.api import Output, POCBase, register_poc\\n\\n\\nclass SSHesame(POCBase):\\n    vulID = '0013'\\n    author = ['jstang']\\n    name = 'sshesame SSH 蜜罐服务'\\n    project = 'sshesame'\\n    appName = 'SSH'\\n    appVersion = 'None'\\n    desc = \\\"sshesame SSH 蜜罐服务, 通过SSH协议使用空数据请求2022端口得到特征值: SSH-2.0-sshesame\\\"\\n\\n    def _attack(self):\\n        return self._verify()\\n\\n    def _verify(self):\\n        try:\\n            attr = self.target.split(':')\\n            if attr[1] != '2022':\\n                return self.parse_output({})\\n            # 1.创建套接字\\n            s = socket.socket()\\n            # 2.连接\\n            s.connect((attr[0], int(attr[1])))\\n            msg = s.recv(1024)\\n            print('From server: %!s(MISSING)' %!m(MISSING)sg)\\n            if 'SSH-2.0-sshesame' in str(msg):\\n                return self.parse_output({'verify': str(msg)})\\n        except Exception as e:\\n            print(e)\\n\\n        return self.parse_output({})\\n\\n    def parse_output(self, result):\\n        output = Output(self)\\n        if result:\\n            output.success(result)\\n        else:\\n            output.fail('The target looks safe!')\\n        return output\\n\\n\\nregister_poc(SSHesame)\\n\",\"create_at\":\"2021-02-01 12:01:36\",\"update_at\":\"2021-02-03 11:00:30\",\"is_delete\":0}]},\"trace_id\":\"ac1f32f9601e50548b9224fcc006ebb0\",\"stack\":null}||proc_time=0.005693844||cspanid=||uri=/trap/plugin/list?page=1&limit=20&info=||method=GET||args=map[]
[INFO][2021-02-06T16:20:51.183][log.go:58] _com_request_in||cspanid=||uri=/trojan/service/list?page=1&limit=20&info=||args=map[]||body=||method=GET||from=172.31.50.45||traceid=ac1f32f9601e516317bc24fc07581fb0||spanid=cc01639a672f5dc3
[INFO][2021-02-06T16:20:51.183][log.go:58] _com_mysql_success||level=sql||current_time=2021-02-06 16:20:51||traceid=ac1f32f9601e516317bc24fc07581fb0||cspanid=||spanid=cc01639a672f5dc3||source=/root/go/src/github.com/wh1t3zer/Hawkeye-Go/dao/portinfo.go:34||proc_time=0.004146s||sql=SELECT * FROM `Hawkeye-Go_portinfo`  WHERE (`Hawkeye-Go_portinfo`.`id` = '686')||affected_row=1
[INFO][2021-02-06T16:20:51.183][log.go:58] _com_mysql_success||proc_time=0.001436s||traceid=ac1f32f9601e516317bc24fc07581fb0||level=sql||source=/root/go/src/github.com/wh1t3zer/Hawkeye-Go/dao/asset.go:35||affected_row=1||cspanid=||spanid=cc01639a672f5dc3||current_time=2021-02-06 16:20:51||sql=SELECT * FROM `Hawkeye-Go_asset`  WHERE (`Hawkeye-Go_asset`.`id` = '149')
[INFO][2021-02-06T16:20:51.183][log.go:58] _com_mysql_success||cspanid=||source=/root/go/src/github.com/wh1t3zer/Hawkeye-Go/dao/portinfo.go:34||current_time=2021-02-06 16:20:51||proc_time=0.001298s||traceid=ac1f32f9601e516317bc24fc07581fb0||spanid=cc01639a672f5dc3||level=sql||sql=SELECT * FROM `Hawkeye-Go_portinfo`  WHERE (`Hawkeye-Go_portinfo`.`id` = '730')||affected_row=1
[INFO][2021-02-06T16:20:51.183][log.go:58] _com_mysql_success||current_time=2021-02-06 16:20:51||sql=SELECT * FROM `Hawkeye-Go_asset`  WHERE (`Hawkeye-Go_asset`.`id` = '158')||proc_time=0.001346s||affected_row=1||traceid=ac1f32f9601e516317bc24fc07581fb0||cspanid=||spanid=cc01639a672f5dc3||level=sql||source=/root/go/src/github.com/wh1t3zer/Hawkeye-Go/dao/asset.go:35
[INFO][2021-02-06T16:20:51.183][log.go:58] _com_mysql_success||sql=SELECT * FROM `Hawkeye-Go_portinfo`  WHERE (`Hawkeye-Go_portinfo`.`id` = '731')||cspanid=||level=sql||current_time=2021-02-06 16:20:51||affected_row=1||traceid=ac1f32f9601e516317bc24fc07581fb0||spanid=cc01639a672f5dc3||source=/root/go/src/github.com/wh1t3zer/Hawkeye-Go/dao/portinfo.go:34||proc_time=0.000993s
[INFO][2021-02-06T16:20:51.183][log.go:58] _com_mysql_success||source=/root/go/src/github.com/wh1t3zer/Hawkeye-Go/dao/asset.go:35||current_time=2021-02-06 16:20:51||sql=SELECT * FROM `Hawkeye-Go_asset`  WHERE (`Hawkeye-Go_asset`.`id` = '158')||cspanid=||spanid=cc01639a672f5dc3||level=sql||proc_time=0.001042s||affected_row=1||traceid=ac1f32f9601e516317bc24fc07581fb0
[INFO][2021-02-06T16:20:51.183][log.go:58] _com_request_out||uri=/trojan/service/list?page=1&limit=20&info=||proc_time=0.038949106||cspanid=||method=GET||args=map[]||from=172.31.50.45||response={\"errno\":0,\"errmsg\":\"\",\"data\":{\"total\":3,\"list\":[{\"asset_id\":149,\"asset_name\":\"172.31.50.86\",\"port_id\":686,\"port_name\":\"7001\",\"real_server\":\"10.244.2.119:39231\",\"create_at\":\"2021-02-05 18:15:38\",\"line\":1},{\"asset_id\":158,\"asset_name\":\"172.31.50.252\",\"port_id\":730,\"port_name\":\"7001\",\"real_server\":\"10.244.2.119:35536\",\"create_at\":\"2021-02-05 18:17:52\",\"line\":1},{\"asset_id\":158,\"asset_name\":\"172.31.50.252\",\"port_id\":731,\"port_name\":\"8081\",\"real_server\":\"10.244.2.120:38024\",\"create_at\":\"2021-02-05 18:17:52\",\"line\":1}]},\"trace_id\":\"ac1f32f9601e516317bc24fc07581fb0\",\"stack\":null}||traceid=ac1f32f9601e516317bc24fc07581fb0||spanid=cc01639a672f5dc3
[INFO][2021-02-06T16:22:01.587][log.go:58] _com_request_in||spanid=cc0163501eedfa54||uri=/trojan/service/list?page=1&limit=20&info=||method=GET||from=172.31.50.45||traceid=ac1f32f9601e51a916e424fc97b545b0||cspanid=||args=map[]||body=
[INFO][2021-02-06T16:22:01.587][log.go:58] _com_mysql_success||level=sql||current_time=2021-02-06 16:22:01||proc_time=0.000964s||traceid=ac1f32f9601e51a916e424fc97b545b0||spanid=cc0163501eedfa54||source=/root/go/src/github.com/wh1t3zer/Hawkeye-Go/dao/portinfo.go:34||sql=SELECT * FROM `Hawkeye-Go_portinfo`  WHERE (`Hawkeye-Go_portinfo`.`id` = '686')||affected_row=1||cspanid=
[INFO][2021-02-06T16:22:01.587][log.go:58] _com_mysql_success||traceid=ac1f32f9601e51a916e424fc97b545b0||level=sql||source=/root/go/src/github.com/wh1t3zer/Hawkeye-Go/dao/asset.go:35||current_time=2021-02-06 16:22:01||proc_time=0.000618s||affected_row=1||sql=SELECT * FROM `Hawkeye-Go_asset`  WHERE (`Hawkeye-Go_asset`.`id` = '149')||cspanid=||spanid=cc0163501eedfa54
[INFO][2021-02-06T16:22:01.587][log.go:58] _com_mysql_success||proc_time=0.000539s||sql=SELECT * FROM `Hawkeye-Go_portinfo`  WHERE (`Hawkeye-Go_portinfo`.`id` = '730')||affected_row=1||cspanid=||spanid=cc0163501eedfa54||current_time=2021-02-06 16:22:01||source=/root/go/src/github.com/wh1t3zer/Hawkeye-Go/dao/portinfo.go:34||traceid=ac1f32f9601e51a916e424fc97b545b0||level=sql
[INFO][2021-02-06T16:22:01.587][log.go:58] _com_mysql_success||level=sql||proc_time=0.000516s||affected_row=1||cspanid=||source=/root/go/src/github.com/wh1t3zer/Hawkeye-Go/dao/asset.go:35||current_time=2021-02-06 16:22:01||sql=SELECT * FROM `Hawkeye-Go_asset`  WHERE (`Hawkeye-Go_asset`.`id` = '158')||traceid=ac1f32f9601e51a916e424fc97b545b0||spanid=cc0163501eedfa54
[INFO][2021-02-06T16:22:01.587][log.go:58] _com_mysql_success||source=/root/go/src/github.com/wh1t3zer/Hawkeye-Go/dao/portinfo.go:34||current_time=2021-02-06 16:22:01||sql=SELECT * FROM `Hawkeye-Go_portinfo`  WHERE (`Hawkeye-Go_portinfo`.`id` = '731')||affected_row=1||traceid=ac1f32f9601e51a916e424fc97b545b0||cspanid=||spanid=cc0163501eedfa54||level=sql||proc_time=0.000811s
[INFO][2021-02-06T16:22:01.587][log.go:58] _com_mysql_success||cspanid=||level=sql||affected_row=1||proc_time=0.000749s||sql=SELECT * FROM `Hawkeye-Go_asset`  WHERE (`Hawkeye-Go_asset`.`id` = '158')||traceid=ac1f32f9601e51a916e424fc97b545b0||spanid=cc0163501eedfa54||source=/root/go/src/github.com/wh1t3zer/Hawkeye-Go/dao/asset.go:35||current_time=2021-02-06 16:22:01
[INFO][2021-02-06T16:22:01.587][log.go:58] _com_request_out||spanid=cc0163501eedfa54||proc_time=0.018762609||traceid=ac1f32f9601e51a916e424fc97b545b0||cspanid=||response={\"errno\":0,\"errmsg\":\"\",\"data\":{\"total\":3,\"list\":[{\"asset_id\":149,\"asset_name\":\"172.31.50.86\",\"port_id\":686,\"port_name\":\"7001\",\"real_server\":\"10.244.2.119:39231\",\"create_at\":\"2021-02-05 18:15:38\",\"line\":1},{\"asset_id\":158,\"asset_name\":\"172.31.50.252\",\"port_id\":730,\"port_name\":\"7001\",\"real_server\":\"10.244.2.119:35536\",\"create_at\":\"2021-02-05 18:17:52\",\"line\":1},{\"asset_id\":158,\"asset_name\":\"172.31.50.252\",\"port_id\":731,\"port_name\":\"8081\",\"real_server\":\"10.244.2.120:38024\",\"create_at\":\"2021-02-05 18:17:52\",\"line\":1}]},\"trace_id\":\"ac1f32f9601e51a916e424fc97b545b0\",\"stack\":null}||uri=/trojan/service/list?page=1&limit=20&info=||method=GET||args=map[]||from=172.31.50.45
[INFO][2021-02-06T16:22:10.026][log.go:58] _com_request_in||from=172.31.50.45||spanid=cc01634b2ae34121||uri=/trojan/echo?id=686&name=172.31.50.86&line=1||method=GET||args=map[]||body=||traceid=ac1f32f9601e51b207ab24fc8cad9db0||cspanid=
